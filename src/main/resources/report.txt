See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  19/41 tests passed
Memory:       0/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 57.80%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.1K Dec 24 14:53 BruteCollinearPoints.java
1.1K Dec 24 14:53 FastCollinearPoints.java
4.4K Dec 24 14:53 Point.java
 582 Dec 24 14:53 Util.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 19]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 19]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -&gt; (7000, 3000)
    - reference segment 0: (10000, 0) -&gt; (7000, 3000) -&gt; (3000, 7000) -&gt; (0, 10000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including: '(20000, 21000) -&gt; (6000, 7000)'
    - 2 missing entries in student solution, including: '(3000, 4000) -&gt; (6000, 7000) -&gt; (14000, 15000) -&gt; (20000, 21000)'

  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

==&gt; FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7453, 14118) -&gt; (5067, 14118)
    - reference segment 4: (2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(7453, 14118) -&gt; (5067, 14118)'
    - 4 missing entries in student solution, including: '(2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19459, 13870) -&gt; (18005, 13870)
    - reference segment 13: (2566, 13870) -&gt; (10653, 13870) -&gt; (18005, 13870) -&gt; (19459, 13870)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(16352, 20913) -&gt; (8784, 20913)'
    - 22 missing entries in student solution, including: '(8784, 20913) -&gt; (9880, 20913) -&gt; (16352, 20913) -&gt; (19666, 20913)'

==&gt; FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8340, 19060) -&gt; (16965, 19060)
    - reference segment 0: (4138, 19060) -&gt; (8340, 19060) -&gt; (16711, 19060) -&gt; (16965, 19060)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(8340, 19060) -&gt; (16965, 19060)'
    - 1 missing entry in student solution: '(4138, 19060) -&gt; (8340, 19060) -&gt; (16711, 19060) -&gt; (16965, 19060)'

    - failed on trial 1 of 500
     4
      8340 19060
      4138 19060
     16711 19060
     16965 19060

  *  5 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(1746, 18038) -&gt; (8566, 18038) -&gt; (13506, 18038) -&gt; (19520, 18038)'

    - failed on trial 1 of 250
     20
     13506 18038
     20536  1222
     15879 14468
      7144 14468
      5394 12018
     19179 14468
     14405  4993
      8566 18038
     14807  1222
     10943 14468
     10129 12018
     14121 12018
     18452  4993
     16068 12018
     12467  4993
      1746 18038
     19520 18038
     14792  1222
     15206  4993
     13649  1222

  * 10 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(5540, 20122) -&gt; (7573, 20122) -&gt; (9956, 20122) -&gt; (18735, 20122)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(1736, 19539) -&gt; (3531, 19539) -&gt; (3827, 19539) -&gt; (6836, 19539)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 19953) -&gt; (14407, 17188)
    - reference segment 3: (14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including: '(14407, 19953) -&gt; (14407, 17188)'
    - 5 missing entries in student solution, including: '(14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)'

  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 5103) -&gt; (11585, 4132)
    - reference segment 12: (11585, 4132) -&gt; (11585, 5103) -&gt; (11585, 11220) -&gt; (11585, 12912)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(9557, 18873) -&gt; (9557, 20238)'
    - 22 missing entries in student solution, including: '(19953, 10489) -&gt; (19953, 10688) -&gt; (19953, 19299) -&gt; (19953, 20439)'

==&gt; FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10005, 1178) -&gt; (10005, 17658)
    - reference segment 0: (10005, 1178) -&gt; (10005, 11891) -&gt; (10005, 17658) -&gt; (10005, 20204)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(10005, 1178) -&gt; (10005, 17658)'
    - 1 missing entry in student solution: '(10005, 1178) -&gt; (10005, 11891) -&gt; (10005, 17658) -&gt; (10005, 20204)'

    - failed on trial 1 of 500
     4
     10005  1178
     10005 11891
     10005 20204
     10005 17658

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(20156, 7846) -&gt; (20156, 9610) -&gt; (20156, 9666) -&gt; (20156, 17305)'

    - failed on trial 1 of 250
     20
      3586  2991
      9629  3208
      3586  5593
      8323 17348
      3586  4638
     20215  6679
     20156  7846
      9629  8886
      8323  8025
     20215  6180
     20156  9610
      9629 17346
     20215 13608
     20156  9666
      8323  7800
      3586 10983
     20215 13071
      9629  4191
      8323 17076
     20156 17305

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(13415, 12672) -&gt; (13415, 14166) -&gt; (13415, 16980) -&gt; (13415, 17402)'

    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(9845, 11177) -&gt; (9845, 15188) -&gt; (9845, 17027) -&gt; (9845, 17075)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

==&gt; FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==&gt; FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7100, 3340) -&gt; (12986, 14734)
    - reference segment 0: (5792, 808) -&gt; (7100, 3340) -&gt; (9716, 8404) -&gt; (12986, 14734)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(7100, 3340) -&gt; (12986, 14734)'
    - 1 missing entry in student solution: '(5792, 808) -&gt; (7100, 3340) -&gt; (9716, 8404) -&gt; (12986, 14734)'

    - failed on trial 1 of 500
     4
      7100  3340
      9716  8404
      5792   808
     12986 14734

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(1483, 12921) -&gt; (4030, 13551) -&gt; (8275, 14601) -&gt; (10822, 15231)'

    - failed on trial 1 of 250
     20
      5452  6894
      4246 10509
      3683 10373
      5474 12999
      5468 11334
      8275 14601
      3297  2689
     10822 15231
      1483 12921
     14984  8240
      5256  4745
     12128 12413
      2557 10101
     17681  9521
      5994  3970
      5456  8004
      3450  3369
      4584  4233
      2736  2825
      4030 13551

  * 10 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(1870, 13459) -&gt; (3612, 13761) -&gt; (5354, 14063) -&gt; (12322, 15271)'

    - failed on trial 1 of 100

  * 15 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(3503, 9111) -&gt; (9943, 10672) -&gt; (17303, 12456) -&gt; (20983, 13348)'

    - failed on trial 1 of 50

==&gt; FAILED

Test 9: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8319, 5915) -&gt; (8447, 6151)
    - reference segment 0: (8319, 5915) -&gt; (8447, 6151) -&gt; (8831, 6859) -&gt; (9343, 7803)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(8319, 5915) -&gt; (8447, 6151)'
    - 1 missing entry in student solution: '(8319, 5915) -&gt; (8447, 6151) -&gt; (8831, 6859) -&gt; (9343, 7803)'

    - failed on trial 3 of 500
     4
      8319  5915
      9343  7803
      8831  6859
      8447  6151

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(3453, 13701) -&gt; (5093, 13701) -&gt; (5503, 13701) -&gt; (5749, 13701)'

    - failed on trial 1 of 250
     20
     11035  9362
      5689  8261
     14562 13135
     11385  9838
      8393  5572
     13246 10080
      3453 13701
      5093 13701
     14590 13200
     12059  6230
      5503 13701
      5749 13701
      6911  5306
      8003  5502
     10285  8342
      7257 10613
      6553  9557
      9710  7560
      5881  8549
     14422 12810

  * 10 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(4370, 12426) -&gt; (6047, 13791) -&gt; (6090, 13826) -&gt; (7079, 14631)'

    - failed on trial 1 of 100

  * 15 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(13162, 12219) -&gt; (13162, 12372) -&gt; (13162, 12899) -&gt; (13162, 12984)'

    - failed on trial 1 of 50

==&gt; FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 8/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -&gt; (7000, 3000)
    - reference segment 0: (10000, 0) -&gt; (7000, 3000) -&gt; (3000, 7000) -&gt; (0, 10000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including: '(20000, 21000) -&gt; (6000, 7000)'
    - 2 missing entries in student solution, including: '(3000, 4000) -&gt; (6000, 7000) -&gt; (14000, 15000) -&gt; (20000, 21000)'

  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

  * filename = input299.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(3250, 17450) -&gt; (8500, 17450) -&gt; (13400, 17450) -&gt; (17250, 17450)'

==&gt; FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7453, 14118) -&gt; (5067, 14118)
    - reference segment 4: (2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(7453, 14118) -&gt; (5067, 14118)'
    - 4 missing entries in student solution, including: '(2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19459, 13870) -&gt; (18005, 13870)
    - reference segment 13: (2566, 13870) -&gt; (10653, 13870) -&gt; (18005, 13870) -&gt; (19459, 13870)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(16352, 20913) -&gt; (8784, 20913)'
    - 22 missing entries in student solution, including: '(8784, 20913) -&gt; (9880, 20913) -&gt; (16352, 20913) -&gt; (19666, 20913)'

  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6300, 7218) -&gt; (6518, 7218)
    - reference segment 17: (6300, 7218) -&gt; (6518, 7218) -&gt; (15233, 7218) -&gt; (17289, 7218)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 41 extra entries in student solution, including: '(5249, 20754) -&gt; (14800, 20754)'
    - 41 missing entries in student solution, including: '(5249, 20754) -&gt; (5559, 20754) -&gt; (14800, 20754) -&gt; (17428, 20754)'

  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20410, 19103) -&gt; (8086, 19103)
    - reference segment 69: (1255, 19103) -&gt; (3822, 19103) -&gt; (8086, 19103) -&gt; (20410, 19103)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 59 extra entries in student solution, including: '(13055, 20618) -&gt; (10027, 20618)'
    - 59 missing entries in student solution, including: '(10027, 20618) -&gt; (13055, 20618) -&gt; (15225, 20618) -&gt; (20029, 20618)'

  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11219, 6140) -&gt; (1238, 6140)
    - reference segment 30: (1238, 6140) -&gt; (1773, 6140) -&gt; (11219, 6140) -&gt; (11759, 6140)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 84 extra entries in student solution, including: '(19642, 20698) -&gt; (7673, 20698)'
    - 84 missing entries in student solution, including: '(5835, 20698) -&gt; (7673, 20698) -&gt; (16154, 20698) -&gt; (19642, 20698)'

==&gt; FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6506, 1992) -&gt; (6321, 1992)
    - reference segment 0: (6321, 1992) -&gt; (6506, 1992) -&gt; (8992, 1992) -&gt; (9853, 1992)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(6506, 1992) -&gt; (6321, 1992)'
    - 1 missing entry in student solution: '(6321, 1992) -&gt; (6506, 1992) -&gt; (8992, 1992) -&gt; (9853, 1992)'

    - failed on trial 1 of 500
     4
      6506  1992
      8992  1992
      9853  1992
      6321  1992

  *  5 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(4165, 20992) -&gt; (7874, 20992) -&gt; (10718, 20992) -&gt; (12567, 20992)'

    - failed on trial 1 of 250
     20
      5259 16394
     10718 20992
      3387 16394
     17631 14881
     14288 14881
     13507 12635
     14008 12635
     12019  4560
     12567 20992
      3319  4560
     15957  4560
     20064 14881
     10406 12635
      7874 20992
     20722 12635
      4165 20992
     18325 16394
     18121 16394
     18847 14881
      7643  4560

  * 10 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(8398, 20097) -&gt; (16365, 20097) -&gt; (16795, 20097) -&gt; (20509, 20097)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(13354, 18368) -&gt; (14254, 18368) -&gt; (15615, 18368) -&gt; (20511, 18368)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 19953) -&gt; (14407, 17188)
    - reference segment 3: (14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including: '(14407, 19953) -&gt; (14407, 17188)'
    - 5 missing entries in student solution, including: '(14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)'

  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 5103) -&gt; (11585, 4132)
    - reference segment 12: (11585, 4132) -&gt; (11585, 5103) -&gt; (11585, 11220) -&gt; (11585, 12912)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(9557, 18873) -&gt; (9557, 20238)'
    - 22 missing entries in student solution, including: '(19953, 10489) -&gt; (19953, 10688) -&gt; (19953, 19299) -&gt; (19953, 20439)'

  * filename = vertical50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10695, 20756) -&gt; (10695, 1287)
    - reference segment 27: (10695, 1287) -&gt; (10695, 10521) -&gt; (10695, 20756) -&gt; (10695, 20927)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 39 extra entries in student solution, including: '(10174, 19026) -&gt; (10174, 19357)'
    - 39 missing entries in student solution, including: '(5991, 15606) -&gt; (5991, 20227) -&gt; (5991, 20340) -&gt; (5991, 20424)'

  * filename = vertical75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2329, 9995) -&gt; (2329, 5466)
    - reference segment 2: (2329, 3548) -&gt; (2329, 5466) -&gt; (2329, 9995) -&gt; (2329, 11424)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 62 extra entries in student solution, including: '(18293, 17680) -&gt; (18293, 20983)'
    - 62 missing entries in student solution, including: '(13780, 16365) -&gt; (13780, 17494) -&gt; (13780, 18253) -&gt; (13780, 18908)'

  * filename = vertical100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2977, 6918) -&gt; (2977, 2179)
    - reference segment 12: (2977, 2179) -&gt; (2977, 6918) -&gt; (2977, 15792) -&gt; (2977, 20105)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 83 extra entries in student solution, including: '(9155, 20746) -&gt; (9155, 18793)'
    - 83 missing entries in student solution, including: '(15135, 15588) -&gt; (15135, 17398) -&gt; (15135, 19476) -&gt; (15135, 20439)'

==&gt; FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (17603, 15060) -&gt; (17603, 10375)
    - reference segment 0: (17603, 10375) -&gt; (17603, 15060) -&gt; (17603, 15930) -&gt; (17603, 16590)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(17603, 15060) -&gt; (17603, 10375)'
    - 1 missing entry in student solution: '(17603, 10375) -&gt; (17603, 15060) -&gt; (17603, 15930) -&gt; (17603, 16590)'

    - failed on trial 2 of 500
     4
     17603 15060
     17603 16590
     17603 15930
     17603 10375

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(5747, 11728) -&gt; (5747, 16707) -&gt; (5747, 18912) -&gt; (5747, 19638)'

    - failed on trial 1 of 250
     20
      6670  5664
      6337 20840
     13655 19964
      6337 14632
      5747 18912
     13655 16473
      5747 16707
     15813  2445
      5747 19638
     15813 19774
     15813 15239
     15813 15343
      6670  4181
      6337  3365
      6670 14218
     13655  3375
      6670 13217
      6337 16569
     13655 13316
      5747 11728

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(17009, 12079) -&gt; (17009, 14867) -&gt; (17009, 15525) -&gt; (17009, 20055)'

    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(5390, 10134) -&gt; (5390, 15636) -&gt; (5390, 16614) -&gt; (5390, 18831)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 9000) -&gt; (6000, 6000)
    - reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 1
    - 2 extra entries in student solution, including: '(9000, 9000) -&gt; (6000, 6000)'
    - 1 missing entry in student solution: '(1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)'

  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4000, 30000) -&gt; (2000, 22000)
    - reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 2
    - 1 extra entry in student solution: '(4000, 30000) -&gt; (2000, 22000)'
    - 2 missing entries in student solution, including: '(1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)'

  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4096, 20992) -&gt; (7168, 20992)
    - reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(4160, 29184) -&gt; (7168, 29184)'
    - 4 missing entries in student solution, including: '(4160, 29184) -&gt; (5120, 29184) -&gt; (6144, 29184) -&gt; (7168, 29184) -&gt; (8192, 29184)'

  * filename = input50.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 7
    - 7 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

  * filename = input80.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 31
    - 31 missing entries in student solution, including: '(13000, 29000) -&gt; (19000, 29000) -&gt; (25000, 29000) -&gt; (28000, 29000)'

  * filename = input300.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(3250, 17450) -&gt; (8500, 17450) -&gt; (13400, 17450) -&gt; (17250, 17450)'

  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5000, 0) -&gt; (20000, 0)
    - reference segment 1: (0, 0) -&gt; (5000, 0) -&gt; (10000, 0) -&gt; (15000, 0) -&gt; (20000, 0) -&gt; (25000, 0) -&gt; (30000, 0)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(0, 20000) -&gt; (0, 10000)'
    - 5 missing entries in student solution, including: '(30000, 0) -&gt; (27000, 7500) -&gt; (26000, 10000) -&gt; (20000, 25000) -&gt; (19000, 27500) -&gt; (18000, 30000)'

==&gt; FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 6: (30600, 3000) -&gt; (30602, 3000)
    - reference segment 118: (30500, 3000) -&gt; (30600, 3000) -&gt; (30601, 3000) -&gt; (30602, 3000) -&gt; (31002, 3000)

    - number of entries in student   solution: 44
    - number of entries in reference solution: 288
    - 26 extra entries in student solution, including: '(24445, 24729) -&gt; (24375, 25221)'
    - 270 missing entries in student solution, including: '(12652, 30395) -&gt; (13180, 30413) -&gt; (13708, 30431) -&gt; (14236, 30449) -&gt; (14764, 30467)'

  * filename = rs1423.txt
    - number of entries in student   solution: 111
    - number of entries in reference solution: 443
    - 332 missing entries in student solution, including: '(14169, 27672) -&gt; (13927, 27810) -&gt; (13685, 27948) -&gt; (13443, 28086)'

==&gt; FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

  * filename = input299.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(3250, 17450) -&gt; (8500, 17450) -&gt; (13400, 17450) -&gt; (17250, 17450)'

==&gt; FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==&gt; FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4881, 11881) -&gt; (9225, 13801)
    - reference segment 0: (4881, 11881) -&gt; (7596, 13081) -&gt; (9225, 13801) -&gt; (10854, 14521)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(4881, 11881) -&gt; (9225, 13801)'
    - 1 missing entry in student solution: '(4881, 11881) -&gt; (7596, 13081) -&gt; (9225, 13801) -&gt; (10854, 14521)'

    - failed on trial 1 of 500
     4
      4881 11881
      7596 13081
     10854 14521
      9225 13801

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(6380, 6345) -&gt; (8480, 10061) -&gt; (10580, 13777) -&gt; (12155, 16564)'

    - failed on trial 1 of 500
     20
     13385 14675
      3034   827
      1885  3755
      9935 11399
      3784  2551
     10580 13777
      8053 15762
     12155 16564
      8480 10061
      8181  7315
      6380  6345
     13960 15221
      8011  3060
      9409 15481
       493  4240
     11293 20700
      8659 13757
      8113  5613
      8249  9017
      8593 16585

  * 25 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including: '(1266, 13582) -&gt; (3057, 13642) -&gt; (10818, 13902) -&gt; (14400, 14022)'

    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including: '(10493, 15660) -&gt; (10676, 16559) -&gt; (11042, 18357) -&gt; (11408, 20155)'

    - failed on trial 1 of 15

  * 100 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including: '(55, 14551) -&gt; (4930, 14721) -&gt; (8830, 14857) -&gt; (15655, 15095)'

    - failed on trial 1 of 2

==&gt; FAILED

Test 10: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10264, 7718) -&gt; (10558, 8159)
    - reference segment 0: (10180, 7592) -&gt; (10264, 7718) -&gt; (10376, 7886) -&gt; (10558, 8159)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(10264, 7718) -&gt; (10558, 8159)'
    - 1 missing entry in student solution: '(10180, 7592) -&gt; (10264, 7718) -&gt; (10376, 7886) -&gt; (10558, 8159)'

    - failed on trial 1 of 500
     4
     10264  7718
     10180  7592
     10376  7886
     10558  8159

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(8687, 11187) -&gt; (8943, 11379) -&gt; (8975, 11403) -&gt; (9375, 11703)'

    - failed on trial 1 of 500
     20
      3211  7939
      7683  7675
      7939  7675
     14365  7077
      9600 11198
      7983  7675
      2756  7714
     12230  6955
      8975 11403
      8943 11379
      8795  9910
     13910  7051
      7290  7502
      9375 11703
      8830  9966
      5850  9244
      7659  7675
     11985  6941
      4576  8614
      8687 11187

  * 25 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including: '(8132, 11974) -&gt; (8322, 11974) -&gt; (8337, 11974) -&gt; (8352, 11974)'

    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including: '(13629, 14206) -&gt; (13845, 14386) -&gt; (13857, 14396) -&gt; (13917, 14446)'

    - failed on trial 1 of 15

  * 100 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including: '(6659, 13566) -&gt; (7459, 13566) -&gt; (7659, 13566) -&gt; (8159, 13566)'

    - failed on trial 1 of 2

==&gt; FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution: '(0, 4) -&gt; (6, 4) -&gt; (7, 4) -&gt; (8, 4)'

    - failed on trial 8 of 500
     5
         7     4
         0     4
         8     4
         9     2
         6     4

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution: '(5, 1) -&gt; (6, 2) -&gt; (8, 4) -&gt; (9, 5)'

    - failed on trial 13 of 500
     10
         2     8
         3     8
         8     4
         1     1
         6     7
         9     5
         8     2
         5     1
         6     2
         4     5

  * 50 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 44
    - 44 missing entries in student solution, including: '(0, 9) -&gt; (1, 9) -&gt; (4, 9) -&gt; (7, 9) -&gt; (9, 9)'

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 122
    - 122 missing entries in student solution, including: '(0, 9) -&gt; (1, 9) -&gt; (2, 9) -&gt; (3, 9) -&gt; (4, 9) -&gt; (5, 9) -&gt; (7, 9) -&gt; (8, 9) -&gt; (9, 9)'

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 200
    - 200 missing entries in student solution, including: '(1, 49) -&gt; (4, 49) -&gt; (22, 49) -&gt; (44, 49)'

    - failed on trial 1 of 10

==&gt; FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3)'

  * 5-by-5 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 16
    - 16 missing entries in student solution, including: '(0, 4) -&gt; (1, 4) -&gt; (2, 4) -&gt; (3, 4) -&gt; (4, 4)'

  * 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 154
    - 154 missing entries in student solution, including: '(0, 9) -&gt; (1, 9) -&gt; (2, 9) -&gt; (3, 9) -&gt; (4, 9) -&gt; (5, 9) -&gt; (6, 9) -&gt; (7, 9) -&gt; (8, 9) -&gt; (9, 9)'

  * 20-by-20 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 2446
    - 2446 missing entries in student solution, including: '(0, 19) -&gt; (1, 19) -&gt; (2, 19) -&gt; (3, 19) -&gt; (4, 19) -&gt; (5, 19) -&gt; (6, 19) -&gt; (7, 19) -&gt; (8, 19) -&gt; (9, 19) -&gt; (10, 19) -&gt; (11, 19) -&gt; (12, 19) -&gt; (13, 19) -&gt; (14, 19) -&gt; (15, 19) -&gt; (16, 19) -&gt; (17, 19) -&gt; (18, 19) -&gt; (19, 19)'

  * 5-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 13
    - 13 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3)'

  * 6-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 16
    - 16 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3)'

  * 10-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 38
    - 38 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3)'

  * 15-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 79
    - 79 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3)'

  * 25-by-4 grid
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (12, 2) -&gt; (21, 2)
    - reference segment 94: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2) -&gt; (6, 2) -&gt; (7, 2) -&gt; (8, 2) -&gt; (9, 2) -&gt; (10, 2) -&gt; (11, 2) -&gt; (12, 2) -&gt; (13, 2) -&gt; (14, 2) -&gt; (15, 2) -&gt; (16, 2) -&gt; (17, 2) -&gt; (18, 2) -&gt; (19, 2) -&gt; (20, 2) -&gt; (21, 2) -&gt; (22, 2) -&gt; (23, 2) -&gt; (24, 2)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 213
    - 1 extra entry in student solution: '(12, 2) -&gt; (21, 2)'
    - 213 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3) -&gt; (15, 3) -&gt; (16, 3) -&gt; (17, 3) -&gt; (18, 3) -&gt; (19, 3) -&gt; (20, 3) -&gt; (21, 3) -&gt; (22, 3) -&gt; (23, 3) -&gt; (24, 3)'

==&gt; FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 8/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 56 bytes (failed)

Total: 0/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00          12           0             12                    0
=&gt; passed    32   0.00          24           0             24                    0
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00          12           0             12                    0
=&gt; passed    32   0.00          24           0             24                    0
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
==&gt; 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.01         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (1536 / 768) = 1.00
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.00         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
=&gt; passed  4096   0.02        3072           0           3072                    0
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (3072 / 1536) = 1.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.00         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
=&gt; passed  4096   0.01        3072           0           3072                    0
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (3072 / 1536) = 1.00
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.00         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
=&gt; passed  4096   0.02        3072           0           3072                    0
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (3072 / 1536) = 1.00
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!


================================================================




