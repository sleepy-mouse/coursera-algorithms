See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (6 warnings)
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  11/41 tests passed
Memory:       0/1 tests passed
Timing:       37/41 tests passed

Aggregate score: 44.15%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 722 Dec 24 13:33 BruteCollinearPoints.java
 728 Dec 24 13:33 FastCollinearPoints.java
4.4K Dec 24 13:33 Point.java
 582 Dec 24 13:33 Util.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'segments', which exposes the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by 'segments' and return the copy.  At BruteCollinearPoints.java:[line 25]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.   At BruteCollinearPoints.java:[line 11]
M V EI_EXPOSE_REP EI: Returns a reference to the mutable object stored in the instance variable 'segments', which exposes the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by 'segments' and return the copy.  At FastCollinearPoints.java:[line 25]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.   At FastCollinearPoints.java:[line 11]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'points' is never read. Consider removing it from the class.  At BruteCollinearPoints.java:[line 11]
L P URF_UNREAD_FIELD UrF: The instance (or static) variable 'points' is never read. Consider removing it from the class.  At FastCollinearPoints.java:[line 11]
Warnings generated: 6


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:5: Avoid unused private instance (or static) variables, such as 'points'. [UnusedPrivateField]
BruteCollinearPoints.java:5: Can you replace the instance (or static) variable 'points' with a local variable? [SingularField]
BruteCollinearPoints.java:6: The private instance (or static) variable 'segments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BruteCollinearPoints.java:25: Returning 'segments' may expose an internal array. If so, return a defensive copy. [MethodReturnsInternalArray]
FastCollinearPoints.java:5: Avoid unused private instance (or static) variables, such as 'points'. [UnusedPrivateField]
FastCollinearPoints.java:5: Can you replace the instance (or static) variable 'points' with a local variable? [SingularField]
FastCollinearPoints.java:6: The private instance (or static) variable 'segments' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:25: Returning 'segments' may expose an internal array. If so, return a defensive copy. [MethodReturnsInternalArray]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    java.lang.NullPointerException: segment 7 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:155)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = equidistant.txt
    java.lang.NullPointerException: segment 14 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:156)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input40.txt
    java.lang.NullPointerException: segment 39 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:157)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input48.txt
    java.lang.NullPointerException: segment 47 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:158)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

==&gt; FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    java.lang.NullPointerException: segment 19 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:164)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

  * filename = horizontal25.txt
    java.lang.NullPointerException: segment 99 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:165)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

==&gt; FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    java.lang.NullPointerException: segment 3 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:219)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 500
     4
      9614 11705
      4784 11705
      9595 11705
     20675 11705

  *  5 random horizontal line segments
    java.lang.NullPointerException: segment 19 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:220)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 250
     20
      9968 11890
     18745 11890
     14527  1400
     10692  2765
      5296 16273
      8762  1400
      2186 16273
      6765  2765
     13086 11890
      4796  1400
     15789 16273
      4512  6641
     16828  2765
      9550  6641
      2790  2765
     11817  6641
      6986 16273
      6865  1400
     10143 11890
     12839  6641

  * 10 random horizontal line segments
    java.lang.NullPointerException: segment 39 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:221)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    java.lang.NullPointerException: segment 59 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:222)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 5

==&gt; FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    java.lang.NullPointerException: segment 19 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:228)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

  * filename = vertical25.txt
    java.lang.NullPointerException: segment 99 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:229)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

==&gt; FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    java.lang.NullPointerException: segment 3 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:235)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 500
     4
     13482  8790
     13482 15412
     13482  8387
     13482 18882

  *  5 random vertical line segments
    java.lang.NullPointerException: segment 19 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:236)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 250
     20
     11900  1805
     11900 12033
      8387 17707
     11900 10122
     20950 19309
      8387  6415
     11512  6785
     11512 13348
     11900  5809
     18470 12769
     20950 19275
      8387  8470
     11512 14717
     20950 19784
     18470  1651
     20950 14727
      8387  3054
     11512 15718
     18470 17604
     18470 12359

  * 10 random vertical line segments
    java.lang.NullPointerException: segment 39 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:237)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 50

  * 15 random vertical line segments
    java.lang.NullPointerException: segment 59 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:238)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 5

==&gt; FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
    java.lang.NullPointerException: segment 22 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test4a(TestBruteCollinearPoints.java:244)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:732)

  * filename = random38.txt
    java.lang.NullPointerException: segment 37 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test4a(TestBruteCollinearPoints.java:245)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:732)

==&gt; FAILED

Test 4b: random points with no line segments
  *  5 random points
    java.lang.NullPointerException: segment 4 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:274)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 500
     5
     13811 15664
     30122 16004
     14675  5239
      8345 28804
     20629  2113

  * 10 random points
    java.lang.NullPointerException: segment 9 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:275)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 250
     10
      2191  8041
       456  1002
     10838  8800
     30416 14819
     23233 23600
      6434 16924
       330 29858
     30448 27626
     31840 14828
      8928 30624

  * 20 random points
    java.lang.NullPointerException: segment 19 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:276)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 100
     20
     30592  9425
     29795 24351
     14614 20334
     22805 26123
     18155 23805
     30034 32311
     16466  7320
     27455 30105
     29963  5126
     10286 17893
     23535 13387
     15045 10015
      9193 14402
     11651 14832
     31816 30031
      6762 30257
     11241 11268
     15939 13136
     23459 11464
     22630 30429

  * 50 random points
    java.lang.NullPointerException: segment 49 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:277)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 10

==&gt; FAILED

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
    java.lang.NullPointerException: segment 0 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:283)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

  * filename = input2.txt
    java.lang.NullPointerException: segment 1 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:284)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

  * filename = input3.txt
    java.lang.NullPointerException: segment 2 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:285)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

==&gt; FAILED

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    java.lang.NullPointerException: segment 14 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:294)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input40.txt
    java.lang.NullPointerException: segment 39 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:295)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input48.txt
    java.lang.NullPointerException: segment 47 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:296)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

==&gt; FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    java.lang.NullPointerException: segment 14 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:304)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input40.txt
    java.lang.NullPointerException: segment 39 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:305)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input48.txt
    java.lang.NullPointerException: segment 47 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:306)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==&gt; FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
    java.lang.NullPointerException: segment 3 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:346)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 500
     4
      8904  3154
     11484  6334
     14064  9514
     17934 14284

  *  5 random line segments
    java.lang.NullPointerException: segment 19 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:347)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 250
     20
      7644  8940
      7632  6465
     16526 15962
     12602 11962
      4848  7794
     10910  8974
       800  3025
     16319  6910
      2670  2670
      6922  4030
      4730  4246
      6070  1108
      7178  8749
      2792  1962
      5314  7985
      8626  9874
      9880  8186
     11885  5800
      3756  3765
     10640  9962

  * 10 random line segments
    java.lang.NullPointerException: segment 39 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:348)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 100

  * 15 random line segments
    java.lang.NullPointerException: segment 59 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:349)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 50

==&gt; FAILED

Test 9: random line segments
  *  1 random line segment
    java.lang.NullPointerException: segment 3 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:379)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 500
     4
     11440  7309
      8890  6357
     15265  8737
     13840  8205

  *  5 random line segments
    java.lang.NullPointerException: segment 19 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:380)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 250
     20
      8124  7558
     13368  9253
      4619  4817
      7087  7422
      5561 10229
      5561 10773
      3935  4385
      7713 13657
      5773 12817
      5561  9345
      6557  6041
      4900 12439
     13368 10453
     11723  8030
      5561 10501
     13368 10228
      6452 13111
      4106  4493
     13368  9228
     10259  7838

  * 10 random line segments
    java.lang.NullPointerException: segment 39 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:381)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 100

  * 15 random line segments
    java.lang.NullPointerException: segment 59 is null

    TestBruteCollinearPoints.toLineSegments226(TestBruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:382)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 50

==&gt; FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
    - failed after 7 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments() -&gt; 8
          collinear.numberOfSegments() -&gt; 8
          collinear.segments()
          collinear.numberOfSegments() -&gt; 8
          mutate array returned by last call to segments()
          collinear.segments()

    - failed on trial 1 of 100

  * equidistant.txt
    - failed after 31 operations involving BruteCollinearPoints
    - first and last call to segments() returned different arrays

    - failed on trial 1 of 100

==&gt; FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 4/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    java.lang.NullPointerException: segment 7 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:156)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = equidistant.txt
    java.lang.NullPointerException: segment 14 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:157)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input40.txt
    java.lang.NullPointerException: segment 39 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:158)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input48.txt
    java.lang.NullPointerException: segment 47 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:159)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

  * filename = input299.txt
    java.lang.NullPointerException: segment 298 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test1(TestFastCollinearPoints.java:160)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:778)

==&gt; FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    java.lang.NullPointerException: segment 19 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:166)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal25.txt
    java.lang.NullPointerException: segment 99 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:167)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal50.txt
    java.lang.NullPointerException: segment 199 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:168)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal75.txt
    java.lang.NullPointerException: segment 299 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:169)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

  * filename = horizontal100.txt
    java.lang.NullPointerException: segment 399 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test2a(TestFastCollinearPoints.java:170)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:781)

==&gt; FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    java.lang.NullPointerException: segment 3 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:224)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 500
     4
     12337  6634
     10459  6634
     16004  6634
     15622  6634

  *  5 random horizontal line segments
    java.lang.NullPointerException: segment 19 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:225)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 250
     20
     14352  8190
      7886  8730
     13034  8730
     18232  8190
     15389 16085
     19084 16085
     20480 16085
      8883  8965
     20263  5202
     16587  8190
     11913  8965
     16859  5202
      9396  5202
     14785  8965
     18953  8965
      4337 16085
     20415  8730
      1081  8190
     19040  5202
     17170  8730

  * 10 random horizontal line segments
    java.lang.NullPointerException: segment 39 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:226)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    java.lang.NullPointerException: segment 59 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.horizontalSegments(TestFastCollinearPoints.java:182)
    TestFastCollinearPoints.test2b(TestFastCollinearPoints.java:227)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:784)

    - failed on trial 1 of 5

==&gt; FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    java.lang.NullPointerException: segment 19 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:233)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical25.txt
    java.lang.NullPointerException: segment 99 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:234)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical50.txt
    java.lang.NullPointerException: segment 199 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:235)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical75.txt
    java.lang.NullPointerException: segment 299 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:236)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

  * filename = vertical100.txt
    java.lang.NullPointerException: segment 399 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test3a(TestFastCollinearPoints.java:237)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:787)

==&gt; FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    java.lang.NullPointerException: segment 3 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:243)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 500
     4
      7715 11915
      7715 19163
      7715 17673
      7715  8267

  *  5 random vertical line segments
    java.lang.NullPointerException: segment 19 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:244)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 250
     20
     18098  7463
     18098  4845
      1469 16971
     16253  1249
     16253  4823
     20960 17150
     20960 16808
      7486  2197
     20960 20155
     18098 14595
      1469  3345
      7486  1847
     16253 10731
      1469 15599
     18098 10014
      7486  3275
      7486 16265
     20960  6546
     16253 14424
      1469 18592

  * 10 random vertical line segments
    java.lang.NullPointerException: segment 39 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:245)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 50

  * 15 random vertical line segments
    java.lang.NullPointerException: segment 59 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.verticalSegments(TestFastCollinearPoints.java:206)
    TestFastCollinearPoints.test3b(TestFastCollinearPoints.java:246)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:790)

    - failed on trial 1 of 5

==&gt; FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
    java.lang.NullPointerException: segment 22 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:252)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

  * filename = random38.txt
    java.lang.NullPointerException: segment 37 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:253)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

  * filename = random91.txt
    java.lang.NullPointerException: segment 90 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:254)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

  * filename = random152.txt
    java.lang.NullPointerException: segment 151 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test4a(TestFastCollinearPoints.java:255)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:793)

==&gt; FAILED

Test 4b: random points with no line segments
  *  5 random points
    java.lang.NullPointerException: segment 4 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.no4CollinearPoints(TestFastCollinearPoints.java:266)
    TestFastCollinearPoints.test4b(TestFastCollinearPoints.java:284)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:796)

    - failed on trial 1 of 500
     5
      3314 22532
     11033 31994
      8397 28536
      3235 18631
      5829 24460

  * 10 random points
    java.lang.NullPointerException: segment 9 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.no4CollinearPoints(TestFastCollinearPoints.java:266)
    TestFastCollinearPoints.test4b(TestFastCollinearPoints.java:285)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:796)

    - failed on trial 1 of 250
     10
      7721  3432
      5808 12784
     31496  8662
     19811 16245
     29153 20798
     30958  2994
     27773 15343
      3981 27916
     12058 28556
     14057 28254

  * 20 random points
    java.lang.NullPointerException: segment 19 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.no4CollinearPoints(TestFastCollinearPoints.java:266)
    TestFastCollinearPoints.test4b(TestFastCollinearPoints.java:286)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:796)

    - failed on trial 1 of 100
     20
      5543 18551
     31846  5934
      8735 23974
      4931 32529
      6879  5940
     24177 16886
      4029 26674
     17872 15065
     10048  3870
     28742 26683
      4986  1855
     28681 19418
     27183 23556
     21634 19284
     16086 24928
      9655 29769
     32338 17731
     24420   266
     21597 28736
     29419 30419

  * 50 random points
    java.lang.NullPointerException: segment 49 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.no4CollinearPoints(TestFastCollinearPoints.java:266)
    TestFastCollinearPoints.test4b(TestFastCollinearPoints.java:287)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:796)

    - failed on trial 1 of 10

==&gt; FAILED

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    java.lang.NullPointerException: segment 8 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:293)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input10.txt
    java.lang.NullPointerException: segment 9 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:294)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input20.txt
    java.lang.NullPointerException: segment 19 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:295)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input50.txt
    java.lang.NullPointerException: segment 49 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:296)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input80.txt
    java.lang.NullPointerException: segment 79 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:297)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = input300.txt
    java.lang.NullPointerException: segment 299 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:298)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

  * filename = inarow.txt
    java.lang.NullPointerException: segment 28 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5a(TestFastCollinearPoints.java:299)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:799)

==&gt; FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    java.lang.NullPointerException: segment 1259 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:306)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

  * filename = rs1423.txt
    java.lang.NullPointerException: segment 1422 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test5b(TestFastCollinearPoints.java:308)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:802)

==&gt; FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
    java.lang.NullPointerException: segment 0 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test6(TestFastCollinearPoints.java:314)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:805)

  * filename = input2.txt
    java.lang.NullPointerException: segment 1 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test6(TestFastCollinearPoints.java:315)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:805)

  * filename = input3.txt
    java.lang.NullPointerException: segment 2 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test6(TestFastCollinearPoints.java:316)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:805)

==&gt; FAILED

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    java.lang.NullPointerException: segment 14 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:325)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input40.txt
    java.lang.NullPointerException: segment 39 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:326)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input48.txt
    java.lang.NullPointerException: segment 47 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:327)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

  * filename = input299.txt
    java.lang.NullPointerException: segment 298 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test7(TestFastCollinearPoints.java:328)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:808)

==&gt; FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    java.lang.NullPointerException: segment 14 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:336)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input40.txt
    java.lang.NullPointerException: segment 39 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:337)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)

  * filename = input48.txt
    java.lang.NullPointerException: segment 47 is null

    TestFastCollinearPoints.toLineSegments226(TestFastCollinearPoints.java:49)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:109)
    TestFastCollinearPoints.file(TestFastCollinearPoints.java:151)
    TestFastCollinearPoints.test8(TestFastCollinearPoints.java:338)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:811)


It is bad style to write code that depends on the

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
