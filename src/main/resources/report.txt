See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (8 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 8 warnings)

Correctness:  34/43 tests passed
Memory:       29/30 tests passed
Timing:       127/136 tests passed

Aggregate score: 85.78%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.3K Dec 12 09:35 Deque.java
 14K Dec 12 09:35 LinkedList.java
 479 Dec 12 09:35 Permutation.java
1.5K Dec 12 09:35 RandomizedQueue.java
 421 Dec 12 09:35 Util.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M C NP_NULL_ON_SOME_PATH NP: Dereferences the variable 'n', but its value might be null on some execution branch.  Dereferenced at LinkedList.java:[line 142]
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'oldLast' but never reads the variable.  At LinkedList.java:[line 313]
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'oldFirst' but never reads the variable.  At LinkedList.java:[line 325]
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'node' but never reads the variable.  At LinkedList.java:[line 339]
M D COM_COPIED_OVERRIDDEN_METHOD COM: Method LinkedList$DescendingListIterator.set(Object) is implemented with an exact copy of its superclass's method  At LinkedList.java:[line 543]
M D COM_COPIED_OVERRIDDEN_METHOD COM: Method LinkedList$DescendingListIterator.add(Object) is implemented with an exact copy of its superclass's method  At LinkedList.java:[line 547]
M C UWF_NULL_FIELD UwF: The instance (or static) variable 'prev' is never assigned a non-null value.  At LinkedList.java:[line 455]
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'removePermissable' is never read. Consider removing it from the class.  At LinkedList.java:[line 441]
Warnings generated: 8


================================================================


% pmd .
*-----------------------------------------------------------
LinkedList.java:491: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
LinkedList.java:495: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
LinkedList.java:542: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
LinkedList.java:546: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
RandomizedQueue.java:57: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 5 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] LinkedList.java:83:43: You should not need to use wildcard types in this course. [TypeParameter]
[WARN] LinkedList.java:88:38: You should not need to use wildcard types in this course. [TypeParameter]
[WARN] LinkedList.java:88:40: You should not need to use type upper or lower bounds in this course. [TypeParameter]
[WARN] LinkedList.java:94:49: You should not need to use wildcard types in this course. [TypeParameter]
[WARN] LinkedList.java:94:51: You should not need to use type upper or lower bounds in this course. [TypeParameter]
[WARN] LinkedList.java:99:41: You should not need to use wildcard types in this course. [TypeParameter]
[WARN] LinkedList.java:104:41: You should not need to use wildcard types in this course. [TypeParameter]
[WARN] LinkedList.java:499:45: Do not use implementation inheritance in this course. [IllegalToken]
Checkstyle ends with 0 errors and 8 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==&gt; passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==&gt; passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==&gt; passed

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==&gt; passed

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==&gt; passed

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
==&gt; passed

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==&gt; passed

Test 8: check whether two Deque objects can be created at the same time
==&gt; passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==&gt; passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
  * m = 50
  * m = 100
  * m = 1000
==&gt; passed

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==&gt; passed

Test 12: create two parallel iterators to same deque
==&gt; passed

Test 13: create Deque objects of different parameterized types
==&gt; passed

Test 14: call addFirst() and addLast() with null argument
==&gt; passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 16: call iterator() when the deque is empty
==&gt; passed


Total: 16/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==&gt; passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==&gt; passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==&gt; passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
==&gt; passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==&gt; passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==&gt; passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==&gt; passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
  * m = 1000
==&gt; passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

  * n = 50
    - two inner iterators return the same sequence of items
    - they should return the same set of items but in a
      different order

==&gt; FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

  * n = 50
    - two iterators return the same sequence of values
    - they should return the same set of values but in a
      different order

==&gt; FAILED

Test 11: create two iterators over different randomized queues
==&gt; passed

Test 12: create RandomizedQueue objects of different parameterized types
==&gt; passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==&gt; passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==&gt; passed

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
               AB     12000    6000.0      16635.53
               BA         0    6000.0          0.00
        -------------------------------------------
                      12000   12000.0      16635.53

    G-statistic = 16635.53 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 3, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              ABC     12000    2000.0      43002.23
              ACB         0    2000.0          0.00
              BAC         0    2000.0          0.00
              BCA         0    2000.0          0.00
              CAB         0    2000.0          0.00
              CBA         0    2000.0          0.00
        -------------------------------------------
                      12000   12000.0      43002.23

    G-statistic = 43002.23 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 4, trials = 12000

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
             ABCD     12000     500.0      76273.29
             ABDC         0     500.0          0.00
             ACBD         0     500.0          0.00
             ACDB         0     500.0          0.00
             ADBC         0     500.0          0.00
             ADCB         0     500.0          0.00
             BACD         0     500.0          0.00
             BADC         0     500.0          0.00
             BCAD         0     500.0          0.00
             BCDA         0     500.0          0.00
             BDAC         0     500.0          0.00
             BDCA         0     500.0          0.00
             CABD         0     500.0          0.00
             CADB         0     500.0          0.00
             CBAD         0     500.0          0.00
             CBDA         0     500.0          0.00
             CDAB         0     500.0          0.00
             CDBA         0     500.0          0.00
             DABC         0     500.0          0.00
             DACB         0     500.0          0.00
             DBAC         0     500.0          0.00
             DBCA         0     500.0          0.00
             DCAB         0     500.0          0.00
             DCBA         0     500.0          0.00
        -------------------------------------------
                      12000   12000.0      76273.29

    G-statistic = 76273.29 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * n = 5, trials = 12000

==&gt; FAILED

Test 16: call enqueue() with a null argument
==&gt; passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 18: call iterator() when randomized queue is empty
==&gt; passed


Total: 15/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 &lt; distinct.txt
  A
  A
  A

  % java Permutation 3 &lt; distinct.txt
  A
  A
  A

  % java Permutation 8 &lt; duplicates.txt
  AA
  AA
  AA
  AA
  AA
  AA
  AA
  AA

==&gt; passed

Test 1b: check formatting for other inputs
  % java Permutation 8 &lt; mediumTale.txt
  it
  it
  it
  it
  it
  it
  it
  it

  % java Permutation 0 &lt; distinct.txt
  [no output]

==&gt; passed

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
    - student solution does not read all data from standard input
    - number of tokens read          = 1
    - number of tokens left unread   = 8
    - number of tokens in input file = 9

  * filename = distinct.txt, k = 3
    - student solution does not read all data from standard input
    - number of tokens read          = 1
    - number of tokens left unread   = 8
    - number of tokens in input file = 9

  * filename = duplicates.txt, k = 8
    - student solution does not read all data from standard input
    - number of tokens read          = 1
    - number of tokens left unread   = 7
    - number of tokens in input file = 8

  * filename = mediumTale.txt, k = 8
    - student solution does not read all data from standard input
    - number of tokens read          = 1
    - number of tokens left unread   = 23
    - number of tokens in input file = 24

==&gt; FAILED

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
    - number of times student prints string "A"   = 3
    - number of times string "A" appears in input = 1
    - failed on trial 1 of 1000

  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
    - number of times student prints string "A"   = 9
    - number of times string "A" appears in input = 1
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 6
    - number of times student prints string "A"   = 6
    - number of times string "A" appears in input = 1
    - failed on trial 1 of 1000

  * filename = permutation10.txt, k = 10
    - number of times student prints string "A"   = 10
    - number of times string "A" appears in input = 1
    - failed on trial 1 of 1000

==&gt; FAILED

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
    - number of times student prints string "AA"   = 8
    - number of times string "AA" appears in input = 1
    - failed on trial 1 of 1000

  * filename = duplicates.txt, k = 3
    - number of times student prints string "AA"   = 3
    - number of times string "AA" appears in input = 1
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 6
    - number of times student prints string "D"   = 6
    - number of times string "D" appears in input = 2
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
    - number of times student prints string "it"   = 10
    - number of times string "it" appears in input = 2
    - failed on trial 1 of 1000

==&gt; FAILED

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
    - number of times student prints string "it"   = 10
    - number of times string "it" appears in input = 4
    - failed on trial 1 of 1000

  * filename = mediumTale.txt, k = 20
    - number of times student prints string "it"   = 20
    - number of times string "it" appears in input = 4
    - failed on trial 1 of 1000

  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==&gt; FAILED

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==&gt; passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                A      1000     250.0       2772.59
                B         0     250.0          0.00
                C         0     250.0          0.00
                D         0     250.0          0.00
        -------------------------------------------
                       1000    1000.0       2772.59

    G-statistic = 2772.59 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * filename = permutation4.txt, k = 2
    - student prints an invalid permutation:
      A A
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 3
    - student prints an invalid permutation:
      A A A
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 4
    - student prints an invalid permutation:
      A A A A
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 2
    - student prints an invalid permutation:
      A A
    - failed on trial 1 of 1000

==&gt; FAILED

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
                A      1000     600.0       1021.65
                B         0     400.0          0.00
        -------------------------------------------
                       1000    1000.0       1021.65

    G-statistic = 1021.65 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * filename = permutation5.txt, k = 2

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              A A      1000     300.0       2407.95
              A B         0     300.0          0.00
              B A         0     300.0          0.00
              B B         0     100.0          0.00
        -------------------------------------------
                       1000    1000.0       2407.95

    G-statistic = 2407.95 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * filename = permutation5.txt, k = 3

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
            A A A      1000     100.0       4605.17
            A A B         0     200.0          0.00
            A B A         0     200.0          0.00
            A B B         0     100.0          0.00
            B A A         0     200.0          0.00
            B A B         0     100.0          0.00
            B B A         0     100.0          0.00
        -------------------------------------------
                       1000    1000.0       4605.17

    G-statistic = 4605.17 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

  * filename = duplicates.txt, k = 3
    - student prints an invalid permutation:
      AA AA AA
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 2

            value  observed  expected   2*O*ln(O/E)
        -------------------------------------------
              A B         0      17.9          0.00
              A C         0      71.4          0.00
              A D         0      35.7          0.00
              B A         0      17.9          0.00
              B C         0      71.4          0.00
              B D         0      35.7          0.00
              C A         0      71.4          0.00
              C B         0      71.4          0.00
              C C         0     214.3          0.00
              C D         0     142.9          0.00
              D A         0      35.7          0.00
              D B         0      35.7          0.00
              D C         0     142.9          0.00
              D D      1000      35.7       6664.41
        -------------------------------------------
                       1000    1000.0       6664.41

    G-statistic = 6664.41 (p-value = 0.000000, reject if p-value &lt;= 0.0001)
    Note: a correct solution will fail this test by bad luck 1 time in 10,000.

==&gt; FAILED

Total: 3/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 &lt; distinct.txt
  * java Permutation 10 &lt; permutation10.txt
  * java Permutation 1 &lt; mediumTale.txt
  * java Permutation 20 &lt; tale.txt
  * java Permutation 100 &lt; tale.txt
  * java Permutation 16412 &lt; tale.txt
==&gt; passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 &lt; distinct.txt
  * java Permutation 10 &lt; permutation10.txt
  * java Permutation 1 &lt; mediumTale.txt
  * java Permutation 20 &lt; tale.txt
  * java Permutation 100 &lt; tale.txt
  * java Permutation 16412 &lt; tale.txt
==&gt; passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 &lt; distinct.txt
  * java Permutation 10 &lt; permutation10.txt
  * java Permutation 1 &lt; mediumTale.txt
  * java Permutation 20 &lt; tale.txt
  * java Permutation 100 &lt; tale.txt
  * java Permutation 16412 &lt; tale.txt
==&gt; passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=&gt; passed        1000     0.00
=&gt; passed        2000     0.00
=&gt; passed        4000     0.00
=&gt; passed        8000     0.00
=&gt; passed       16000     0.00
=&gt; passed       32000     0.00
=&gt; passed       64000     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.00
=&gt; passed      512000     0.00
==&gt; 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=&gt; passed        1000     0.00
=&gt; passed        2000     0.00
=&gt; passed        4000     0.00
=&gt; passed        8000     0.00
=&gt; passed       16000     0.00
=&gt; passed       32000     0.00
=&gt; passed       64000     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.00
=&gt; passed      512000     0.00
==&gt; 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==&gt; passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = distinct.txt, n = 9, k = 4
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tinyTale.txt, n = 12, k = 10
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 5
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 50
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 500
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 5000
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 50000
    - not storing k items on either a Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

==&gt; FAILED

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - not storing k items on either Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 50
    - not storing k items on either Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 500
    - not storing k items on either Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 5000
    - not storing k items on either Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

  * filename = tale.txt, n = 138653, k = 50000
    - not storing k items on either Deque or RandomizedQueue
    - this suggests you are using an auxilliary data structure
      other than a Deque or RandomizedQueue
    - max size of Deque           = 0
    - max size of RandomizedQueue = 1

==&gt; FAILED

Total: 1/2 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed        8          408
=&gt; passed       64         2648
=&gt; passed      256        10328
=&gt; passed     1024        41048
=&gt; passed     4096       163928
==&gt; 5/5 tests passed

Memory: 40.00 n + 88.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed        8          448
=&gt; passed       64         2688
=&gt; passed      256        10368
=&gt; passed     1024        41088
=&gt; passed     4096       163968
==&gt; 5/5 tests passed

Memory after adding n = 2^i + 1 items: 40.00 n + 88.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed        8          448
=&gt; passed       64         2688
=&gt; passed      256        10368
=&gt; passed     1024        41088
=&gt; passed     4096       163968
==&gt; 5/5 tests passed

Memory: 40.00 n + 88.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=&gt; passed        8          128
=&gt; passed       64          128
=&gt; passed      256          128
=&gt; passed     1024          128
=&gt; passed     4096          128
==&gt; 5/5 tests passed

Memory after adding n = 2^i items: 128.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=&gt; passed        8           56
=&gt; passed       64           56
=&gt; passed      256           56
=&gt; passed     1024           56
=&gt; passed     4096           56
==&gt; 5/5 tests passed

Memory of iterator after adding n = 2^i items: 56.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
==&gt; passed

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
  * 100 random operations (0.0, 0.8, 0.0, 0.2)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
  * 100 random operations (0.2, 0.2, 0.3, 0.3)
==&gt; passed

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==&gt; passed

Total: 28/28 tests passed!

================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32         1344
=&gt; passed       64         2624
=&gt; passed      128         5184
=&gt; passed      256        10304
=&gt; passed      512        20544
=&gt; passed     1024        41024
=&gt; passed     2048        81984
=&gt; passed     4096       163904
=&gt; passed     8192       327744
==&gt; 9/9 tests passed

Memory: 40.00 n + 64.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       33         1384
=&gt; passed       65         2664
=&gt; passed      129         5224
=&gt; passed      257        10344
=&gt; passed      513        20584
=&gt; passed     1025        41064
=&gt; passed     2049        82024
=&gt; passed     4097       163944
=&gt; passed     8193       327784
==&gt; 9/9 tests passed

Memory: 40.00 n + 64.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       33         1384
=&gt; passed       65         2664
=&gt; passed      129         5224
=&gt; passed      257        10344
=&gt; passed      513        20584
=&gt; passed     1025        41064
=&gt; passed     2049        82024
=&gt; passed     4097       163944
=&gt; passed     8193       327784
==&gt; 9/9 tests passed

Memory: 40.00 n + 64.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32         1344
=&gt; passed       64         2624
=&gt; passed      128         5184
=&gt; passed      256        10304
=&gt; passed      512        20544
=&gt; passed     1024        41024
=&gt; passed     2048        81984
=&gt; passed     4096       163904
=&gt; passed     8192       327744
==&gt; 9/9 tests passed

Memory: 40.00 n + 64.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32          104
=&gt; passed       64          104
=&gt; passed      128          104
=&gt; passed      256          104
=&gt; passed      512          104
=&gt; passed     1024          104
=&gt; passed     2048          104
=&gt; passed     4096          104
=&gt; passed     8192          104
==&gt; 9/9 tests passed

Memory: 104.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=&gt; passed       32           56
=&gt; passed       64           56
=&gt; passed      128           56
=&gt; passed      256           56
=&gt; passed      512           56
=&gt; passed     1024           56
=&gt; passed     2048           56
=&gt; passed     4096           56
=&gt; passed     8192           56
==&gt; 9/9 tests passed

Memory: 56.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==&gt; passed

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==&gt; passed

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==&gt; passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 0

    ProgramPerformanceLimits.&lt;init&gt;(ProgramPerformanceLimits.java:72)
    MemoryOfRandomizedQueue.printTable(MemoryOfRandomizedQueue.java:84)
    MemoryOfRandomizedQueue.test9(MemoryOfRandomizedQueue.java:640)
    MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:744)

Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 55 total tests.

Test 1a-1g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed      512000     0.03
=&gt; passed     1024000     0.07
=&gt; passed     2048000     0.13
==&gt; 12/12 tests passed


Test 2a-2g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed      512000     0.02
=&gt; passed     1024000     0.03
=&gt; passed     2048000     0.07
==&gt; 12/12 tests passed


Test 3a-3g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed      512000     0.02
=&gt; passed     1024000     0.04
=&gt; passed     2048000     0.08
==&gt; 12/12 tests passed


Test 4a-4g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.00
=&gt; passed      512000     0.01
=&gt; passed     1024000     0.01
=&gt; passed     2048000     0.04
==&gt; 12/12 tests passed


Test 5a-5g: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst()/removeLast() and addFirst()/addLast()

                    n  seconds
----------------------------------
=&gt; passed        1025     0.00
=&gt; passed        2049     0.00
=&gt; passed        4097     0.00
=&gt; passed       16385     0.00
=&gt; passed       32767     0.00
=&gt; passed       32768     0.00
=&gt; passed       32769     0.00
==&gt; 7/7 tests passed

Total: 55/55 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 58 total tests.

Test 1: make n calls to enqueue(); make n calls to dequeue();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==&gt; passed

Test 2: make n calls to enqueue(); make n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==&gt; passed

Test 3: make n calls to enqueue(); iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==&gt; passed

Test 4a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed      512000     0.06
=&gt; passed     1024000     0.12
=&gt; FAILED     2048000     2.00
   [ Most likely one of your operations is not constant time. ]

==&gt; 11/12 tests passed


Test 5a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.02
=&gt; passed       32768     0.08
=&gt; passed       65536     0.32
=&gt; FAILED      128000     1.22
   [ Most likely one of your operations is not constant time. ]

==&gt; 7/12 tests passed


Test 6a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.1, 0.1, 0.6, 0.1, 0.1)

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed      512000     0.05
=&gt; passed     1024000     0.17
=&gt; passed     2048000     0.49
==&gt; 12/12 tests passed


Test 7a-g: make n calls to enqueue(); iterate over the n items
           by calling next() and hasNext().

                    n  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        2048     0.00
=&gt; passed        4096     0.00
=&gt; passed        8192     0.00
=&gt; passed       16384     0.00
=&gt; passed       32768     0.00
=&gt; passed       65536     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed      512000     0.03
=&gt; passed     1024000     0.04
=&gt; passed     2048000     0.03
==&gt; 12/12 tests passed


Test 8a-g: make n calls to enqueue(); interleave n calls each
           to dequeue() and enqueue().

                    n  seconds
----------------------------------
=&gt; passed        1025     0.00
=&gt; passed        2049     0.01
=&gt; passed        4097     0.03
=&gt; passed       16385     0.48
=&gt; FAILED       32767     1.88
   [ Most likely one of your operations is not constant time. ]

==&gt; 4/7 tests passed

Total: 49/58 tests passed!


================================================================




