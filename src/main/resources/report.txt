See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  19/41 tests passed
Memory:       0/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 57.80%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.1K Jan  9 13:11 BruteCollinearPoints.java
1.1K Jan  9 13:11 FastCollinearPoints.java
4.3K Jan  9 13:11 Point.java
 582 Jan  9 13:11 Util.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 19]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 19]
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -&gt; (7000, 3000)
    - reference segment 0: (10000, 0) -&gt; (7000, 3000) -&gt; (3000, 7000) -&gt; (0, 10000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including: '(20000, 21000) -&gt; (6000, 7000)'
    - 2 missing entries in student solution, including: '(3000, 4000) -&gt; (6000, 7000) -&gt; (14000, 15000) -&gt; (20000, 21000)'

  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

==&gt; FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7453, 14118) -&gt; (5067, 14118)
    - reference segment 4: (2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(7453, 14118) -&gt; (5067, 14118)'
    - 4 missing entries in student solution, including: '(2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19459, 13870) -&gt; (18005, 13870)
    - reference segment 13: (2566, 13870) -&gt; (10653, 13870) -&gt; (18005, 13870) -&gt; (19459, 13870)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(16352, 20913) -&gt; (8784, 20913)'
    - 22 missing entries in student solution, including: '(8784, 20913) -&gt; (9880, 20913) -&gt; (16352, 20913) -&gt; (19666, 20913)'

==&gt; FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (12033, 19395) -&gt; (5703, 19395)
    - reference segment 0: (5703, 19395) -&gt; (11752, 19395) -&gt; (12033, 19395) -&gt; (18079, 19395)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(12033, 19395) -&gt; (5703, 19395)'
    - 1 missing entry in student solution: '(5703, 19395) -&gt; (11752, 19395) -&gt; (12033, 19395) -&gt; (18079, 19395)'

    - failed on trial 1 of 500
     4
     12033 19395
     18079 19395
     11752 19395
      5703 19395

  *  5 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(5222, 16689) -&gt; (8128, 16689) -&gt; (19219, 16689) -&gt; (19779, 16689)'

    - failed on trial 1 of 250
     20
     14276 12472
     19779 16689
     20192 14715
      1402 12472
      9629 14757
     18039 12472
      1886  6733
     15359 14757
      6256 14715
      9753 12472
     19219 16689
     10468 14715
      5222 16689
     11369 14757
      1142  6733
      2338 14757
      8128 16689
     14257  6733
      4325 14715
     14391  6733

  * 10 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(8917, 18043) -&gt; (11065, 18043) -&gt; (11805, 18043) -&gt; (18151, 18043)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(5455, 20144) -&gt; (6832, 20144) -&gt; (9288, 20144) -&gt; (18759, 20144)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 19953) -&gt; (14407, 17188)
    - reference segment 3: (14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including: '(14407, 19953) -&gt; (14407, 17188)'
    - 5 missing entries in student solution, including: '(14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)'

  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 5103) -&gt; (11585, 4132)
    - reference segment 12: (11585, 4132) -&gt; (11585, 5103) -&gt; (11585, 11220) -&gt; (11585, 12912)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(9557, 18873) -&gt; (9557, 20238)'
    - 22 missing entries in student solution, including: '(19953, 10489) -&gt; (19953, 10688) -&gt; (19953, 19299) -&gt; (19953, 20439)'

==&gt; FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (17268, 14029) -&gt; (17268, 14652)
    - reference segment 0: (17268, 5383) -&gt; (17268, 14029) -&gt; (17268, 14652) -&gt; (17268, 19604)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(17268, 14029) -&gt; (17268, 14652)'
    - 1 missing entry in student solution: '(17268, 5383) -&gt; (17268, 14029) -&gt; (17268, 14652) -&gt; (17268, 19604)'

    - failed on trial 1 of 500
     4
     17268 14029
     17268  5383
     17268 19604
     17268 14652

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(20918, 11565) -&gt; (20918, 11963) -&gt; (20918, 15230) -&gt; (20918, 15836)'

    - failed on trial 1 of 250
     20
      7830  6443
     17691 17219
     14492 11107
     17691 12590
     20918 15230
     14492 19272
     20533  4998
     17691  1812
      7830 20837
     14492  3118
     14492  3520
     17691 20069
      7830  6076
      7830 17013
     20918 11963
     20533 14246
     20533  3046
     20533  1609
     20918 11565
     20918 15836

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(5254, 6711) -&gt; (5254, 11993) -&gt; (5254, 14435) -&gt; (5254, 18696)'

    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(5526, 9034) -&gt; (5526, 10361) -&gt; (5526, 10818) -&gt; (5526, 17682)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

==&gt; FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==&gt; FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5609, 7531) -&gt; (11621, 14524)
    - reference segment 0: (4941, 6754) -&gt; (5609, 7531) -&gt; (11621, 14524) -&gt; (14961, 18409)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(5609, 7531) -&gt; (11621, 14524)'
    - 1 missing entry in student solution: '(4941, 6754) -&gt; (5609, 7531) -&gt; (11621, 14524) -&gt; (14961, 18409)'

    - failed on trial 1 of 500
     4
      5609  7531
      4941  6754
     14961 18409
     11621 14524

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(1402, 14475) -&gt; (3664, 14550) -&gt; (5172, 14600) -&gt; (8942, 14725)'

    - failed on trial 1 of 250
     20
     13416 12060
      3664 14550
     11094  9234
      4956  9223
      5172 14600
      6046  9353
     11166  1120
      4084  9119
     10642  7860
      5610  9301
     10868  8547
     10765   289
      1402 14475
     14374  7768
     10416  7173
     10236 10750
      8942 14725
      6102  9047
     14052 12322
     11968  2782

  * 10 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(11998, 11997) -&gt; (12155, 12951) -&gt; (12783, 16767) -&gt; (12940, 17721)'

    - failed on trial 1 of 100

  * 15 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(495, 10555) -&gt; (1321, 10772) -&gt; (2973, 11206) -&gt; (5451, 11857)'

    - failed on trial 1 of 50

==&gt; FAILED

Test 9: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1604, 5614) -&gt; (356, 4444)
    - reference segment 0: (356, 4444) -&gt; (1124, 5164) -&gt; (1604, 5614) -&gt; (2948, 6874)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(1604, 5614) -&gt; (356, 4444)'
    - 1 missing entry in student solution: '(356, 4444) -&gt; (1124, 5164) -&gt; (1604, 5614) -&gt; (2948, 6874)'

    - failed on trial 1 of 500
     4
      1604  5614
      2948  6874
      1124  5164
       356  4444

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(5230, 11152) -&gt; (5378, 11152) -&gt; (5430, 11152) -&gt; (5458, 11152)'

    - failed on trial 1 of 250
     20
     13680  2655
       366  9677
      5378 11152
      1506  9773
      6820  7913
      5401 10101
      5458 11152
      5211 10085
      7216  7913
     13680  6425
      5761  3077
      8299  5372
     13680  6367
     13680  3757
      8899  7913
      5430 11152
     13657 10217
     12364  7913
      7923  5032
      5230 11152

  * 10 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(6830, 12889) -&gt; (6830, 13241) -&gt; (6830, 13725) -&gt; (6830, 14583)'

    - failed on trial 1 of 100

  * 15 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(294, 13038) -&gt; (978, 13038) -&gt; (4474, 13038) -&gt; (5310, 13038)'

    - failed on trial 1 of 50

==&gt; FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 8/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -&gt; (7000, 3000)
    - reference segment 0: (10000, 0) -&gt; (7000, 3000) -&gt; (3000, 7000) -&gt; (0, 10000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 2
    - 2 extra entries in student solution, including: '(20000, 21000) -&gt; (6000, 7000)'
    - 2 missing entries in student solution, including: '(3000, 4000) -&gt; (6000, 7000) -&gt; (14000, 15000) -&gt; (20000, 21000)'

  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

  * filename = input299.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(3250, 17450) -&gt; (8500, 17450) -&gt; (13400, 17450) -&gt; (17250, 17450)'

==&gt; FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7453, 14118) -&gt; (5067, 14118)
    - reference segment 4: (2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 4 extra entries in student solution, including: '(7453, 14118) -&gt; (5067, 14118)'
    - 4 missing entries in student solution, including: '(2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)'

  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19459, 13870) -&gt; (18005, 13870)
    - reference segment 13: (2566, 13870) -&gt; (10653, 13870) -&gt; (18005, 13870) -&gt; (19459, 13870)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(16352, 20913) -&gt; (8784, 20913)'
    - 22 missing entries in student solution, including: '(8784, 20913) -&gt; (9880, 20913) -&gt; (16352, 20913) -&gt; (19666, 20913)'

  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6300, 7218) -&gt; (6518, 7218)
    - reference segment 17: (6300, 7218) -&gt; (6518, 7218) -&gt; (15233, 7218) -&gt; (17289, 7218)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 41 extra entries in student solution, including: '(5249, 20754) -&gt; (14800, 20754)'
    - 41 missing entries in student solution, including: '(5249, 20754) -&gt; (5559, 20754) -&gt; (14800, 20754) -&gt; (17428, 20754)'

  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20410, 19103) -&gt; (8086, 19103)
    - reference segment 69: (1255, 19103) -&gt; (3822, 19103) -&gt; (8086, 19103) -&gt; (20410, 19103)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 59 extra entries in student solution, including: '(13055, 20618) -&gt; (10027, 20618)'
    - 59 missing entries in student solution, including: '(10027, 20618) -&gt; (13055, 20618) -&gt; (15225, 20618) -&gt; (20029, 20618)'

  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11219, 6140) -&gt; (1238, 6140)
    - reference segment 30: (1238, 6140) -&gt; (1773, 6140) -&gt; (11219, 6140) -&gt; (11759, 6140)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 84 extra entries in student solution, including: '(19642, 20698) -&gt; (7673, 20698)'
    - 84 missing entries in student solution, including: '(5835, 20698) -&gt; (7673, 20698) -&gt; (16154, 20698) -&gt; (19642, 20698)'

==&gt; FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20754, 3196) -&gt; (13176, 3196)
    - reference segment 0: (2480, 3196) -&gt; (8675, 3196) -&gt; (13176, 3196) -&gt; (20754, 3196)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(20754, 3196) -&gt; (13176, 3196)'
    - 1 missing entry in student solution: '(2480, 3196) -&gt; (8675, 3196) -&gt; (13176, 3196) -&gt; (20754, 3196)'

    - failed on trial 1 of 500
     4
     20754  3196
      2480  3196
      8675  3196
     13176  3196

  *  5 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(2595, 20678) -&gt; (4761, 20678) -&gt; (4893, 20678) -&gt; (19938, 20678)'

    - failed on trial 1 of 250
     20
     16169 13737
      2595 20678
      4893 20678
     13122 13737
     20040  6387
     11342 14217
      3554 13737
     11633 19813
     20805  6387
     19457  6387
      1031 14217
     19938 20678
      9121 14217
     10750 14217
     19951  6387
      9849 19813
      7164 19813
      6575 19813
     15978 13737
      4761 20678

  * 10 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(7926, 18816) -&gt; (11762, 18816) -&gt; (13424, 18816) -&gt; (15034, 18816)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(6768, 20932) -&gt; (7755, 20932) -&gt; (8252, 20932) -&gt; (13011, 20932)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 19953) -&gt; (14407, 17188)
    - reference segment 3: (14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)

    - number of entries in student   solution: 5
    - number of entries in reference solution: 5
    - 5 extra entries in student solution, including: '(14407, 19953) -&gt; (14407, 17188)'
    - 5 missing entries in student solution, including: '(14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)'

  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 5103) -&gt; (11585, 4132)
    - reference segment 12: (11585, 4132) -&gt; (11585, 5103) -&gt; (11585, 11220) -&gt; (11585, 12912)

    - number of entries in student   solution: 25
    - number of entries in reference solution: 25
    - 22 extra entries in student solution, including: '(9557, 18873) -&gt; (9557, 20238)'
    - 22 missing entries in student solution, including: '(19953, 10489) -&gt; (19953, 10688) -&gt; (19953, 19299) -&gt; (19953, 20439)'

  * filename = vertical50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10695, 20756) -&gt; (10695, 1287)
    - reference segment 27: (10695, 1287) -&gt; (10695, 10521) -&gt; (10695, 20756) -&gt; (10695, 20927)

    - number of entries in student   solution: 50
    - number of entries in reference solution: 50
    - 39 extra entries in student solution, including: '(10174, 19026) -&gt; (10174, 19357)'
    - 39 missing entries in student solution, including: '(5991, 15606) -&gt; (5991, 20227) -&gt; (5991, 20340) -&gt; (5991, 20424)'

  * filename = vertical75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2329, 9995) -&gt; (2329, 5466)
    - reference segment 2: (2329, 3548) -&gt; (2329, 5466) -&gt; (2329, 9995) -&gt; (2329, 11424)

    - number of entries in student   solution: 75
    - number of entries in reference solution: 75
    - 62 extra entries in student solution, including: '(18293, 17680) -&gt; (18293, 20983)'
    - 62 missing entries in student solution, including: '(13780, 16365) -&gt; (13780, 17494) -&gt; (13780, 18253) -&gt; (13780, 18908)'

  * filename = vertical100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2977, 6918) -&gt; (2977, 2179)
    - reference segment 12: (2977, 2179) -&gt; (2977, 6918) -&gt; (2977, 15792) -&gt; (2977, 20105)

    - number of entries in student   solution: 100
    - number of entries in reference solution: 100
    - 83 extra entries in student solution, including: '(9155, 20746) -&gt; (9155, 18793)'
    - 83 missing entries in student solution, including: '(15135, 15588) -&gt; (15135, 17398) -&gt; (15135, 19476) -&gt; (15135, 20439)'

==&gt; FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19285, 9240) -&gt; (19285, 14467)
    - reference segment 0: (19285, 6753) -&gt; (19285, 8700) -&gt; (19285, 9240) -&gt; (19285, 14467)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(19285, 9240) -&gt; (19285, 14467)'
    - 1 missing entry in student solution: '(19285, 6753) -&gt; (19285, 8700) -&gt; (19285, 9240) -&gt; (19285, 14467)'

    - failed on trial 1 of 500
     4
     19285  9240
     19285  6753
     19285  8700
     19285 14467

  *  5 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(8120, 9493) -&gt; (8120, 15089) -&gt; (8120, 17930) -&gt; (8120, 20861)'

    - failed on trial 1 of 250
     20
     14846  3039
     11032  1799
      8072  5711
      9747 10382
      8072 14834
      9747  4811
     14846 11959
      8120 15089
      9747  7490
     11032 10115
     11032  8206
      8072 11218
      8120 17930
     14846 18485
      9747  3094
      8120 20861
      8072 12543
     11032 14268
      8120  9493
     14846 15414

  * 10 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(6010, 11278) -&gt; (6010, 12735) -&gt; (6010, 13944) -&gt; (6010, 19269)'

    - failed on trial 1 of 50

  * 15 random vertical line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 15
    - 15 missing entries in student solution, including: '(14373, 15704) -&gt; (14373, 19026) -&gt; (14373, 19902) -&gt; (14373, 20103)'

    - failed on trial 1 of 5

==&gt; FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==&gt; passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==&gt; passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 9000) -&gt; (6000, 6000)
    - reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

    - number of entries in student   solution: 2
    - number of entries in reference solution: 1
    - 2 extra entries in student solution, including: '(9000, 9000) -&gt; (6000, 6000)'
    - 1 missing entry in student solution: '(1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)'

  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4000, 30000) -&gt; (2000, 22000)
    - reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 2
    - 1 extra entry in student solution: '(4000, 30000) -&gt; (2000, 22000)'
    - 2 missing entries in student solution, including: '(1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)'

  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4096, 20992) -&gt; (7168, 20992)
    - reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

    - number of entries in student   solution: 4
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(4160, 29184) -&gt; (7168, 29184)'
    - 4 missing entries in student solution, including: '(4160, 29184) -&gt; (5120, 29184) -&gt; (6144, 29184) -&gt; (7168, 29184) -&gt; (8192, 29184)'

  * filename = input50.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 7
    - 7 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

  * filename = input80.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 31
    - 31 missing entries in student solution, including: '(13000, 29000) -&gt; (19000, 29000) -&gt; (25000, 29000) -&gt; (28000, 29000)'

  * filename = input300.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(3250, 17450) -&gt; (8500, 17450) -&gt; (13400, 17450) -&gt; (17250, 17450)'

  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5000, 0) -&gt; (20000, 0)
    - reference segment 1: (0, 0) -&gt; (5000, 0) -&gt; (10000, 0) -&gt; (15000, 0) -&gt; (20000, 0) -&gt; (25000, 0) -&gt; (30000, 0)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 5
    - 3 extra entries in student solution, including: '(0, 20000) -&gt; (0, 10000)'
    - 5 missing entries in student solution, including: '(30000, 0) -&gt; (27000, 7500) -&gt; (26000, 10000) -&gt; (20000, 25000) -&gt; (19000, 27500) -&gt; (18000, 30000)'

==&gt; FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 6: (30600, 3000) -&gt; (30602, 3000)
    - reference segment 118: (30500, 3000) -&gt; (30600, 3000) -&gt; (30601, 3000) -&gt; (30602, 3000) -&gt; (31002, 3000)

    - number of entries in student   solution: 44
    - number of entries in reference solution: 288
    - 26 extra entries in student solution, including: '(24445, 24729) -&gt; (24375, 25221)'
    - 270 missing entries in student solution, including: '(12652, 30395) -&gt; (13180, 30413) -&gt; (13708, 30431) -&gt; (14236, 30449) -&gt; (14764, 30467)'

  * filename = rs1423.txt
    - number of entries in student   solution: 111
    - number of entries in reference solution: 443
    - 332 missing entries in student solution, including: '(14169, 27672) -&gt; (13927, 27810) -&gt; (13685, 27948) -&gt; (13443, 28086)'

==&gt; FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==&gt; passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'

  * filename = input299.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(3250, 17450) -&gt; (8500, 17450) -&gt; (13400, 17450) -&gt; (17250, 17450)'

==&gt; FAILED

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - number of entries in student   solution: 1
    - number of entries in reference solution: 4
    - 3 missing entries in student solution, including: '(30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)'

  * filename = input40.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 4
    - 4 missing entries in student solution, including: '(2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)'

  * filename = input48.txt
    - number of entries in student   solution: 0
    - number of entries in reference solution: 6
    - 6 missing entries in student solution, including: '(1000, 26000) -&gt; (9000, 26000) -&gt; (11000, 26000) -&gt; (18000, 26000)'


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==&gt; FAILED

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11018, 8406) -&gt; (13451, 9108)
    - reference segment 0: (5341, 6768) -&gt; (10207, 8172) -&gt; (11018, 8406) -&gt; (13451, 9108)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(11018, 8406) -&gt; (13451, 9108)'
    - 1 missing entry in student solution: '(5341, 6768) -&gt; (10207, 8172) -&gt; (11018, 8406) -&gt; (13451, 9108)'

    - failed on trial 1 of 500
     4
     11018  8406
      5341  6768
     10207  8172
     13451  9108

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(7454, 6063) -&gt; (8654, 11037) -&gt; (8854, 11866) -&gt; (9254, 13524)'

    - failed on trial 1 of 500
     20
      6315  5302
     11591  5278
     14863 19166
      7295  5472
     12213  7881
      3379  5774
     11705 21808
      8854 11866
     11615  8758
     12949 16934
      8654 11037
     11215  6152
     17176 13754
     14225 18422
     11603  7018
      9254 13524
      7250  2008
      5832   330
       435  4282
      7454  6063

  * 25 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including: '(5678, 12912) -&gt; (6604, 13222) -&gt; (12160, 15082) -&gt; (15864, 16322)'

    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including: '(6246, 14393) -&gt; (10916, 16583) -&gt; (11850, 17021) -&gt; (14652, 18335)'

    - failed on trial 1 of 15

  * 100 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including: '(6061, 13314) -&gt; (6630, 13443) -&gt; (7199, 13572) -&gt; (9475, 14088)'

    - failed on trial 1 of 2

==&gt; FAILED

Test 10: random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7141, 10597) -&gt; (6140, 9838)
    - reference segment 0: (43, 5215) -&gt; (6140, 9838) -&gt; (6686, 10252) -&gt; (7141, 10597)

    - number of entries in student   solution: 1
    - number of entries in reference solution: 1
    - 1 extra entry in student solution: '(7141, 10597) -&gt; (6140, 9838)'
    - 1 missing entry in student solution: '(43, 5215) -&gt; (6140, 9838) -&gt; (6686, 10252) -&gt; (7141, 10597)'

    - failed on trial 1 of 500
     4
      7141 10597
        43  5215
      6686 10252
      6140  9838

  *  5 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 5
    - 5 missing entries in student solution, including: '(7382, 13222) -&gt; (9267, 13367) -&gt; (9527, 13387) -&gt; (9592, 13392)'

    - failed on trial 1 of 500
     20
      5752  3143
      7994  5233
      8712  8382
      9267 13367
      8112  5343
      8212 11077
      7382 13222
      4070  9965
     11062 11077
      4394 10273
      9637 11077
      9527 13387
      7286  4573
      7277  5512
      1316  7347
      8432  7822
     12772 11077
      8282 13969
     10182 11322
      9592 13392

  * 25 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 25
    - 25 missing entries in student solution, including: '(4352, 11111) -&gt; (4730, 11111) -&gt; (5162, 11111) -&gt; (6026, 11111)'

    - failed on trial 1 of 100

  * 50 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 50
    - 50 missing entries in student solution, including: '(13143, 14645) -&gt; (13585, 14645) -&gt; (13942, 14645) -&gt; (14044, 14645)'

    - failed on trial 1 of 15

  * 100 random line segments
    - number of entries in student   solution: 0
    - number of entries in reference solution: 100
    - 100 missing entries in student solution, including: '(7780, 13891) -&gt; (8792, 14089) -&gt; (9114, 14152) -&gt; (10632, 14449)'

    - failed on trial 1 of 2

==&gt; FAILED

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution: '(0, 9) -&gt; (2, 9) -&gt; (3, 9) -&gt; (4, 9)'

    - failed on trial 81 of 500
     5
         2     9
         3     9
         3     5
         0     9
         4     9

  * 10 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 1
    - 1 missing entry in student solution: '(7, 0) -&gt; (7, 1) -&gt; (7, 5) -&gt; (7, 6)'

    - failed on trial 6 of 500
     10
         7     6
         1     2
         0     1
         6     8
         7     0
         7     1
         4     1
         4     6
         6     7
         7     5

  * 50 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 40
    - 40 missing entries in student solution, including: '(0, 9) -&gt; (1, 9) -&gt; (3, 9) -&gt; (5, 9) -&gt; (6, 9) -&gt; (8, 9)'

    - failed on trial 1 of 100

  * 90 random points in a 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 119
    - 119 missing entries in student solution, including: '(0, 9) -&gt; (1, 9) -&gt; (2, 9) -&gt; (3, 9) -&gt; (4, 9) -&gt; (5, 9) -&gt; (6, 9) -&gt; (8, 9) -&gt; (9, 9)'

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 233
    - 233 missing entries in student solution, including: '(2, 49) -&gt; (15, 49) -&gt; (25, 49) -&gt; (37, 49)'

    - failed on trial 1 of 10

==&gt; FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 10
    - 10 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3)'

  * 5-by-5 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 16
    - 16 missing entries in student solution, including: '(0, 4) -&gt; (1, 4) -&gt; (2, 4) -&gt; (3, 4) -&gt; (4, 4)'

  * 10-by-10 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 154
    - 154 missing entries in student solution, including: '(0, 9) -&gt; (1, 9) -&gt; (2, 9) -&gt; (3, 9) -&gt; (4, 9) -&gt; (5, 9) -&gt; (6, 9) -&gt; (7, 9) -&gt; (8, 9) -&gt; (9, 9)'

  * 20-by-20 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 2446
    - 2446 missing entries in student solution, including: '(0, 19) -&gt; (1, 19) -&gt; (2, 19) -&gt; (3, 19) -&gt; (4, 19) -&gt; (5, 19) -&gt; (6, 19) -&gt; (7, 19) -&gt; (8, 19) -&gt; (9, 19) -&gt; (10, 19) -&gt; (11, 19) -&gt; (12, 19) -&gt; (13, 19) -&gt; (14, 19) -&gt; (15, 19) -&gt; (16, 19) -&gt; (17, 19) -&gt; (18, 19) -&gt; (19, 19)'

  * 5-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 13
    - 13 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3)'

  * 6-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 16
    - 16 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3)'

  * 10-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 38
    - 38 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3)'

  * 15-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 79
    - 79 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3)'

  * 25-by-4 grid
    - number of entries in student   solution: 0
    - number of entries in reference solution: 213
    - 213 missing entries in student solution, including: '(0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3) -&gt; (15, 3) -&gt; (16, 3) -&gt; (17, 3) -&gt; (18, 3) -&gt; (19, 3) -&gt; (20, 3) -&gt; (21, 3) -&gt; (22, 3) -&gt; (23, 3) -&gt; (24, 3)'

==&gt; FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==&gt; passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==&gt; passed


Total: 8/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 56 bytes (failed)

Total: 0/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00          12           0             12                    0
=&gt; passed    32   0.00          24           0             24                    0
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00          12           0             12                    0
=&gt; passed    32   0.00          24           0             24                    0
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
==&gt; 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.01         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (1536 / 768) = 1.00
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.00         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
=&gt; passed  4096   0.01        3072           0           3072                    0
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (3072 / 1536) = 1.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.00         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
=&gt; passed  4096   0.01        3072           0           3072                    0
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (3072 / 1536) = 1.00
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00          48           0             48                    0
=&gt; passed   128   0.00          96           0             96                    0
=&gt; passed   256   0.00         192           0            192                    0
=&gt; passed   512   0.00         384           0            384                    0
=&gt; passed  1024   0.00         768           0            768                    0
=&gt; passed  2048   0.00        1536           0           1536                    0
=&gt; passed  4096   0.01        3072           0           3072                    0
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (3072 / 1536) = 1.00
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!


================================================================




