See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  13/30 tests passed
Memory:       0/8 tests passed
Timing:       0/20 tests passed

Aggregate score: 36.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.7K Nov 27 00:19 Percolation.java
1008 Nov 27 00:19 PercolationStats.java
  17 Nov 27 00:19 Util.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
PercolationStats.java:32: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------
[INFO] Percolation.java:87: Using a loop in this method might be a performance bug. [Performance]
[INFO] Percolation.java:97: Using a loop in this method might be a performance bug. [Performance]
[WARN] Percolation.java:3:1: Defining a nested class in this program suggests poor design. [Design]
[WARN] Percolation.java:8:19: Can you use the type 'boolean[]' instead of 'int[]'? [Design]
[WARN] Percolation.java:9:19: Can you use the type 'boolean[]' instead of 'int[]'? [Design]
Checkstyle ends with 0 errors and 3 warnings.

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------
[WARN] PercolationStats.java:1: The number (0) of calls to 'Integer.parseInt()' must equal the number (2) of integer command-line arguments. [CommandLineArgument]
[WARN] PercolationStats.java:1: The total number of calls to the static method in the set { StdRandom.uniform(), StdRandom.permutation(), StdRandom.random(), StdRandom.shuffle() } is 0 (min required = 1). [MethodCallCount]
[WARN] PercolationStats.java:1: Use 'StdStats.mean()' to compute the mean. [MethodCallCount]
[WARN] PercolationStats.java:1: Use 'StdStats.stddev()' to compute the standard deviation. [MethodCallCount]
Checkstyle ends with 0 errors and 4 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 15 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Except as noted, a site is opened at most once.

Tests 13 through 15 test backwash.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
  * filename = input8.txt
  * filename = input8-no.txt
  * filename = input10-no.txt
  * filename = greeting57.txt
  * filename = heart25.txt
==&gt; passed

Test 2: open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==&gt; passed

Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)
  * filename = input1.txt
  * filename = input1-no.txt
  * filename = input2.txt
  * filename = input2-no.txt
==&gt; passed

Test 4: check predetermined sites with long percolating path
  * filename = snake13.txt
  * filename = snake101.txt
==&gt; passed

Test 5: open every site
  * filename = input5.txt
==&gt; passed

Test 6: open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
    - numberOfOpenSites() returns wrong value after 5 sites opened
    - student   numberOfOpenSites() = 6
    - reference numberOfOpenSites() = 5

  * n = 5
    - numberOfOpenSites() returns wrong value after 6 sites opened
    - student   numberOfOpenSites() = 7
    - reference numberOfOpenSites() = 6

  * n = 10
    - numberOfOpenSites() returns wrong value after 16 sites opened
    - student   numberOfOpenSites() = 17
    - reference numberOfOpenSites() = 16

  * n = 10
    - numberOfOpenSites() returns wrong value after 8 sites opened
    - student   numberOfOpenSites() = 9
    - reference numberOfOpenSites() = 8

  * n = 20
    - numberOfOpenSites() returns wrong value after 16 sites opened
    - student   numberOfOpenSites() = 17
    - reference numberOfOpenSites() = 16

  * n = 20
    - numberOfOpenSites() returns wrong value after 31 sites opened
    - student   numberOfOpenSites() = 32
    - reference numberOfOpenSites() = 31

  * n = 50
    - numberOfOpenSites() returns wrong value after 27 sites opened
    - student   numberOfOpenSites() = 28
    - reference numberOfOpenSites() = 27

  * n = 50
    - numberOfOpenSites() returns wrong value after 60 sites opened
    - student   numberOfOpenSites() = 61
    - reference numberOfOpenSites() = 60

==&gt; FAILED

Test 7: call methods with invalid arguments
  * n = 10, (row, col) = (-1, 5)
  * n = 10, (row, col) = (11, 5)
  * n = 10, (row, col) = (0, 5)
  * n = 10, (row, col) = (5, -1)
  * n = 10, (row, col) = (5, 11)
  * n = 10, (row, col) = (5, 0)
  * n = 10, (row, col) = (-2147483648, -2147483648)
  * n = 10, (row, col) = (2147483647, 2147483647)
==&gt; passed

Test 8: call constructor with invalid argument
  * n = -10
  * n = -1
  * n = 0
==&gt; passed

Test 9: create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
==&gt; passed

Test 10: open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==&gt; passed

Test 11: call all methods in random order until just before system percolates
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==&gt; passed

Test 12: call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==&gt; passed

Test 13: check for backwash with predetermined sites
  * filename = input20.txt
  * filename = input10.txt
  * filename = input50.txt
  * filename = jerry47.txt
  * filename = sedgewick60.txt
  * filename = wayne98.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 250000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==&gt; FAILED

Test 14: check for backwash with predetermined sites that have
         multiple percolating paths
  * filename = input3.txt
  * filename = input4.txt
  * filename = input7.txt
==&gt; passed

Test 15: call all methods in random order until all sites are open,
         allowing isOpen() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - numberOfOpenSites() returns wrong value after 4 sites opened
    - student   numberOfOpenSites() = 5
    - reference numberOfOpenSites() = 4

    - failed on trial 1 of 40

  * n = 5
    - numberOfOpenSites() returns wrong value after 6 sites opened
    - student   numberOfOpenSites() = 8
    - reference numberOfOpenSites() = 6

    - failed on trial 1 of 20

  * n = 7
    - numberOfOpenSites() returns wrong value after 5 sites opened
    - student   numberOfOpenSites() = 6
    - reference numberOfOpenSites() = 5

    - failed on trial 1 of 10

  * n = 10
    - numberOfOpenSites() returns wrong value after 15 sites opened
    - student   numberOfOpenSites() = 16
    - reference numberOfOpenSites() = 15

    - failed on trial 1 of 5

  * n = 20
    - numberOfOpenSites() returns wrong value after 5 sites opened
    - student   numberOfOpenSites() = 6
    - reference numberOfOpenSites() = 5

    - failed on trial 1 of 2

  * n = 50
    - numberOfOpenSites() returns wrong value after 67 sites opened
    - student   numberOfOpenSites() = 68
    - reference numberOfOpenSites() = 67

    - failed on trial 1 of 1

==&gt; FAILED


Total: 12/15 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check that methods in PercolationStats do not print to standard output
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSideEffects(TestPercolationStats.java:76)
    TestPercolationStats.test1(TestPercolationStats.java:760)
    TestPercolationStats.main(TestPercolationStats.java:922)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSideEffects(TestPercolationStats.java:76)
    TestPercolationStats.test1(TestPercolationStats.java:761)
    TestPercolationStats.main(TestPercolationStats.java:922)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSideEffects(TestPercolationStats.java:76)
    TestPercolationStats.test1(TestPercolationStats.java:762)
    TestPercolationStats.main(TestPercolationStats.java:922)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSideEffects(TestPercolationStats.java:76)
    TestPercolationStats.test1(TestPercolationStats.java:763)
    TestPercolationStats.main(TestPercolationStats.java:922)

==&gt; FAILED

Test 2: check that mean() returns value in expected range
  * n =   2, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanCorrect(TestPercolationStats.java:220)
    TestPercolationStats.test2(TestPercolationStats.java:769)
    TestPercolationStats.main(TestPercolationStats.java:925)

  * n =   5, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanCorrect(TestPercolationStats.java:220)
    TestPercolationStats.test2(TestPercolationStats.java:770)
    TestPercolationStats.main(TestPercolationStats.java:925)

  * n =  10, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanCorrect(TestPercolationStats.java:220)
    TestPercolationStats.test2(TestPercolationStats.java:771)
    TestPercolationStats.main(TestPercolationStats.java:925)

  * n =  25, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanCorrect(TestPercolationStats.java:220)
    TestPercolationStats.test2(TestPercolationStats.java:772)
    TestPercolationStats.main(TestPercolationStats.java:925)

==&gt; FAILED

Test 3: check that stddev() returns value in expected range
  * n =   2, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevCorrect(TestPercolationStats.java:261)
    TestPercolationStats.test3(TestPercolationStats.java:778)
    TestPercolationStats.main(TestPercolationStats.java:928)

  * n =   5, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevCorrect(TestPercolationStats.java:261)
    TestPercolationStats.test3(TestPercolationStats.java:779)
    TestPercolationStats.main(TestPercolationStats.java:928)

  * n =  10, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevCorrect(TestPercolationStats.java:261)
    TestPercolationStats.test3(TestPercolationStats.java:780)
    TestPercolationStats.main(TestPercolationStats.java:928)

  * n =  25, trials = 10000
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevCorrect(TestPercolationStats.java:261)
    TestPercolationStats.test3(TestPercolationStats.java:781)
    TestPercolationStats.main(TestPercolationStats.java:928)

==&gt; FAILED

Test 4: check that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkGridSizes(TestPercolationStats.java:110)
    TestPercolationStats.test4(TestPercolationStats.java:787)
    TestPercolationStats.main(TestPercolationStats.java:931)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkGridSizes(TestPercolationStats.java:110)
    TestPercolationStats.test4(TestPercolationStats.java:788)
    TestPercolationStats.main(TestPercolationStats.java:931)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkGridSizes(TestPercolationStats.java:110)
    TestPercolationStats.test4(TestPercolationStats.java:789)
    TestPercolationStats.main(TestPercolationStats.java:931)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkGridSizes(TestPercolationStats.java:110)
    TestPercolationStats.test4(TestPercolationStats.java:790)
    TestPercolationStats.main(TestPercolationStats.java:931)

==&gt; FAILED

Test 5: check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesBefore(TestPercolationStats.java:140)
    TestPercolationStats.test5(TestPercolationStats.java:796)
    TestPercolationStats.main(TestPercolationStats.java:934)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesBefore(TestPercolationStats.java:140)
    TestPercolationStats.test5(TestPercolationStats.java:797)
    TestPercolationStats.main(TestPercolationStats.java:934)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesBefore(TestPercolationStats.java:140)
    TestPercolationStats.test5(TestPercolationStats.java:798)
    TestPercolationStats.main(TestPercolationStats.java:934)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesBefore(TestPercolationStats.java:140)
    TestPercolationStats.test5(TestPercolationStats.java:799)
    TestPercolationStats.main(TestPercolationStats.java:934)

==&gt; FAILED

Test 6: check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesAfter(TestPercolationStats.java:165)
    TestPercolationStats.test6(TestPercolationStats.java:805)
    TestPercolationStats.main(TestPercolationStats.java:937)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesAfter(TestPercolationStats.java:165)
    TestPercolationStats.test6(TestPercolationStats.java:806)
    TestPercolationStats.main(TestPercolationStats.java:937)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesAfter(TestPercolationStats.java:165)
    TestPercolationStats.test6(TestPercolationStats.java:807)
    TestPercolationStats.main(TestPercolationStats.java:937)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkPercolatesAfter(TestPercolationStats.java:165)
    TestPercolationStats.test6(TestPercolationStats.java:808)
    TestPercolationStats.main(TestPercolationStats.java:937)

==&gt; FAILED

Test 7: check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanConsistent(TestPercolationStats.java:295)
    TestPercolationStats.test7(TestPercolationStats.java:815)
    TestPercolationStats.main(TestPercolationStats.java:940)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanConsistent(TestPercolationStats.java:295)
    TestPercolationStats.test7(TestPercolationStats.java:816)
    TestPercolationStats.main(TestPercolationStats.java:940)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanConsistent(TestPercolationStats.java:295)
    TestPercolationStats.test7(TestPercolationStats.java:817)
    TestPercolationStats.main(TestPercolationStats.java:940)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkMeanConsistent(TestPercolationStats.java:295)
    TestPercolationStats.test7(TestPercolationStats.java:818)
    TestPercolationStats.main(TestPercolationStats.java:940)

==&gt; FAILED

Test 8: check that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevConsistent(TestPercolationStats.java:325)
    TestPercolationStats.test8(TestPercolationStats.java:825)
    TestPercolationStats.main(TestPercolationStats.java:943)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevConsistent(TestPercolationStats.java:325)
    TestPercolationStats.test8(TestPercolationStats.java:826)
    TestPercolationStats.main(TestPercolationStats.java:943)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevConsistent(TestPercolationStats.java:325)
    TestPercolationStats.test8(TestPercolationStats.java:827)
    TestPercolationStats.main(TestPercolationStats.java:943)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkStddevConsistent(TestPercolationStats.java:325)
    TestPercolationStats.test8(TestPercolationStats.java:828)
    TestPercolationStats.main(TestPercolationStats.java:943)

==&gt; FAILED

Test 9: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkConfidenceConsistent(TestPercolationStats.java:359)
    TestPercolationStats.test9(TestPercolationStats.java:834)
    TestPercolationStats.main(TestPercolationStats.java:946)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkConfidenceConsistent(TestPercolationStats.java:359)
    TestPercolationStats.test9(TestPercolationStats.java:835)
    TestPercolationStats.main(TestPercolationStats.java:946)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkConfidenceConsistent(TestPercolationStats.java:359)
    TestPercolationStats.test9(TestPercolationStats.java:836)
    TestPercolationStats.main(TestPercolationStats.java:946)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkConfidenceConsistent(TestPercolationStats.java:359)
    TestPercolationStats.test9(TestPercolationStats.java:837)
    TestPercolationStats.main(TestPercolationStats.java:946)

==&gt; FAILED

Test 10: check that exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
  * n = -42, trials =   0
  * n =  42, trials =  -1
  * n = -2147483648, trials = -2147483648
==&gt; passed

Test 11: create two PercolationStats objects at the same time and check mean()
         (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkTwoPercolationStats(TestPercolationStats.java:397)
    TestPercolationStats.test11(TestPercolationStats.java:856)
    TestPercolationStats.main(TestPercolationStats.java:952)

  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkTwoPercolationStats(TestPercolationStats.java:397)
    TestPercolationStats.test11(TestPercolationStats.java:857)
    TestPercolationStats.main(TestPercolationStats.java:952)

  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkTwoPercolationStats(TestPercolationStats.java:397)
    TestPercolationStats.test11(TestPercolationStats.java:858)
    TestPercolationStats.main(TestPercolationStats.java:952)

  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkTwoPercolationStats(TestPercolationStats.java:397)
    TestPercolationStats.test11(TestPercolationStats.java:859)
    TestPercolationStats.main(TestPercolationStats.java:952)

  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkTwoPercolationStats(TestPercolationStats.java:397)
    TestPercolationStats.test11(TestPercolationStats.java:860)
    TestPercolationStats.main(TestPercolationStats.java:952)

  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkTwoPercolationStats(TestPercolationStats.java:397)
    TestPercolationStats.test11(TestPercolationStats.java:861)
    TestPercolationStats.main(TestPercolationStats.java:952)

==&gt; FAILED

Test 12: check that the methods return the same value, regardless of
         the order in which they are called
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.stddev(PercolationStats.java:17)
    TestPercolationStats.checkImmutability(TestPercolationStats.java:463)
    TestPercolationStats.test12(TestPercolationStats.java:870)
    TestPercolationStats.main(TestPercolationStats.java:955)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkImmutability(TestPercolationStats.java:450)
    TestPercolationStats.test12(TestPercolationStats.java:871)
    TestPercolationStats.main(TestPercolationStats.java:955)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.confidenceHi(PercolationStats.java:29)
    TestPercolationStats.checkImmutability(TestPercolationStats.java:489)
    TestPercolationStats.test12(TestPercolationStats.java:872)
    TestPercolationStats.main(TestPercolationStats.java:955)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkImmutability(TestPercolationStats.java:450)
    TestPercolationStats.test12(TestPercolationStats.java:873)
    TestPercolationStats.main(TestPercolationStats.java:955)

==&gt; FAILED

Test 13: check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSetSeed(TestPercolationStats.java:740)
    TestPercolationStats.test13(TestPercolationStats.java:880)
    TestPercolationStats.main(TestPercolationStats.java:958)

  * n = 20, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSetSeed(TestPercolationStats.java:740)
    TestPercolationStats.test13(TestPercolationStats.java:881)
    TestPercolationStats.main(TestPercolationStats.java:958)

  * n = 40, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSetSeed(TestPercolationStats.java:740)
    TestPercolationStats.test13(TestPercolationStats.java:882)
    TestPercolationStats.main(TestPercolationStats.java:958)

  * n = 80, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkSetSeed(TestPercolationStats.java:740)
    TestPercolationStats.test13(TestPercolationStats.java:883)
    TestPercolationStats.main(TestPercolationStats.java:958)

==&gt; FAILED

Test 14: check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkStoppingTimeDistribution(TestPercolationStats.java:575)
    TestPercolationStats.test14(TestPercolationStats.java:890)
    TestPercolationStats.main(TestPercolationStats.java:961)

  * n = 3, trials = 100000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkStoppingTimeDistribution(TestPercolationStats.java:575)
    TestPercolationStats.test14(TestPercolationStats.java:891)
    TestPercolationStats.main(TestPercolationStats.java:961)

  * n = 4, trials = 100000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkStoppingTimeDistribution(TestPercolationStats.java:575)
    TestPercolationStats.test14(TestPercolationStats.java:892)
    TestPercolationStats.main(TestPercolationStats.java:961)

==&gt; FAILED

Test 15: check that each site is opened the expected number of times
  * n = 2, trials = 100000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkOpenSiteDistribution(TestPercolationStats.java:652)
    TestPercolationStats.test15(TestPercolationStats.java:899)
    TestPercolationStats.main(TestPercolationStats.java:964)

  * n = 3, trials = 100000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkOpenSiteDistribution(TestPercolationStats.java:652)
    TestPercolationStats.test15(TestPercolationStats.java:900)
    TestPercolationStats.main(TestPercolationStats.java:964)

  * n = 4, trials = 100000
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TestPercolationStats.checkOpenSiteDistribution(TestPercolationStats.java:652)
    TestPercolationStats.test15(TestPercolationStats.java:901)
    TestPercolationStats.main(TestPercolationStats.java:964)

==&gt; FAILED


Total: 1/15 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Analyzing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check memory usage as a function of T trials for n = 100
            (max allowed: 8*T + 128 bytes)

                 T        bytes
--------------------------------------------
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    MemoryOfPercolationStats.main(MemoryOfPercolationStats.java:81)

==&gt; 0/4 tests passed


If you failed this test, it may be because you are holding an unnecessary
reference to a (large) Percolation object in an instance variable. Would
storing it in a local variable suffice?


Estimated student memory =   (R^2 = 1.000)

Total: 0/4 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: count calls to StdStats.mean() and StdStats.stddev()
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdStats(TimePercolationStats.java:35)
    TimePercolationStats.test1(TimePercolationStats.java:236)
    TimePercolationStats.main(TimePercolationStats.java:313)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdStats(TimePercolationStats.java:35)
    TimePercolationStats.test1(TimePercolationStats.java:237)
    TimePercolationStats.main(TimePercolationStats.java:313)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdStats(TimePercolationStats.java:35)
    TimePercolationStats.test1(TimePercolationStats.java:238)
    TimePercolationStats.main(TimePercolationStats.java:313)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdStats(TimePercolationStats.java:35)
    TimePercolationStats.test1(TimePercolationStats.java:239)
    TimePercolationStats.main(TimePercolationStats.java:313)

==&gt; FAILED

Test 2: count calls to methods in StdRandom
  * n = 20, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdRandom(TimePercolationStats.java:76)
    TimePercolationStats.test2(TimePercolationStats.java:246)
    TimePercolationStats.main(TimePercolationStats.java:316)

  * n = 20, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdRandom(TimePercolationStats.java:76)
    TimePercolationStats.test2(TimePercolationStats.java:247)
    TimePercolationStats.main(TimePercolationStats.java:316)

  * n = 40, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdRandom(TimePercolationStats.java:76)
    TimePercolationStats.test2(TimePercolationStats.java:248)
    TimePercolationStats.main(TimePercolationStats.java:316)

  * n = 80, trials = 10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToStdRandom(TimePercolationStats.java:76)
    TimePercolationStats.test2(TimePercolationStats.java:249)
    TimePercolationStats.main(TimePercolationStats.java:316)

==&gt; FAILED

Test 3: count calls to methods in Percolation
  * n =  20, trials =  10
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToPercolation(TimePercolationStats.java:125)
    TimePercolationStats.test3(TimePercolationStats.java:255)
    TimePercolationStats.main(TimePercolationStats.java:319)

  * n =  50, trials =  20
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToPercolation(TimePercolationStats.java:125)
    TimePercolationStats.test3(TimePercolationStats.java:256)
    TimePercolationStats.main(TimePercolationStats.java:319)

  * n = 100, trials =  50
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToPercolation(TimePercolationStats.java:125)
    TimePercolationStats.test3(TimePercolationStats.java:257)
    TimePercolationStats.main(TimePercolationStats.java:319)

  * n =  64, trials = 150
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.countCallsToPercolation(TimePercolationStats.java:125)
    TimePercolationStats.test3(TimePercolationStats.java:258)
    TimePercolationStats.main(TimePercolationStats.java:319)

==&gt; FAILED

Test 4: Call PercolationStats methods with trials = 3 and values of n that go up
        by a factor of sqrt(2). The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
    java.lang.UnsupportedOperationException

    PercolationStats.mean(PercolationStats.java:11)
    TimePercolationStats.time(TimePercolationStats.java:221)
    TimePercolationStats.test4(TimePercolationStats.java:277)
    TimePercolationStats.main(TimePercolationStats.java:322)

        16 Infinity  Infinity
     [ exceeded the time limit of 10.0 seconds ]

==&gt; FAILED


Total: 0/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check that total memory &lt;= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=&gt; FAILED       64       138096   (1.8x)

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Total: 0/4 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 16 total tests.

Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates, interleaving calls to percolates() and open().
            Count calls to connected(), union() and find().

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
=&gt; FAILED       16          130                  5806   (3.1x)          1
=&gt; FAILED       32          609                127164  (17.2x)          1
=&gt; FAILED       64         2285               2407214  (81.6x)          1
=&gt; FAILED      128         9018              39348988 (333.6x)          1

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in WeightedQuickUnionUF exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==&gt; 0/7 tests passed


If one of the values in the table violates the performance limits
the factor by which you failed the test appears in parentheses.
For example, (9.6x) in the union() column indicates that it uses
9.6x too many calls.


Tests 2a-2f: Check whether the number of calls to union(), connected(), and find()
             is a constant per call to open(), isOpen(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isOpen(), isFull(),
             and percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates()
---------------------------------------------------------------------------------------------
=&gt; FAILED       16        4               0              15             135   (5.6x)
=&gt; FAILED       32        4               0              24             552  (23.0x)
=&gt; FAILED       64        4               0              41   (1.7x)   1681  (70.0x)
=&gt; FAILED      128        4               0              73   (3.0x)   5621 (234.2x)
=&gt; FAILED      256        4               0             163   (6.8x)  21842 (910.1x)


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.


Total: 0/16 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================




