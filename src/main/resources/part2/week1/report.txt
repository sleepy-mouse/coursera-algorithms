See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  31/35 tests passed
Memory:       4/4 tests passed
Timing:       9/27 tests passed

Aggregate score: 79.81%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 858 Nov 23 02:41 Outcast.java
3.8K Nov 23 02:41 SAP.java
1.1K Nov 23 02:41 Synset.java
1.7K Nov 23 02:41 Util.java
3.4K Nov 23 02:41 WordNet.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac SAP.java
*-----------------------------------------------------------

% javac WordNet.java
*-----------------------------------------------------------

% javac Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M C FCCD_FIND_CLASS_CIRCULAR_DEPENDENCY FCCD: Class SAP has a circular dependency with other classes  At SAP.java:[lines 18-87]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------
[INFO] WordNet.java:1: The program uses neither 'DirectedCycle' nor 'Topological' to check whether the digraph is a DAG. [Design]

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 19 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph9.txt
==&gt; passed

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
==&gt; passed

Test 3: check length() and ancestor() on directed paths
  * 5
  * 10
  * 20
  * 50
  * 100
==&gt; passed

Test 4: check length() and ancestor() on directed cycles
  * 5
  * 10
  * 20
  * 50
  * 100
==&gt; passed

Test 5: check length() and ancestor() on complete graphs
  * 5
  * 10
  * 20
  * 50
==&gt; passed

Test 6: check length() and ancestor() on tournament digraphs
  * 5
  * 10
  * 20
  * 50
==&gt; passed

Test 7: check length() and ancestor() on complete binary trees
  * 5
  * 10
  * 20
  * 50
  * 100
==&gt; passed

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==&gt; passed

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==&gt; passed

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==&gt; passed

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==&gt; passed

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==&gt; passed

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==&gt; passed

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
  * digraph3.txt and digraph4.txt
  * digraph5.txt and digraph6.txt
  * digraph2.txt and digraph1.txt
==&gt; passed

Test 15: check whether SAP is immutable
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph-ambiguous-ancestor.txt
==&gt; passed

Test 16: check invalid arguments to length() and ancestor() in digraph1.txt
  * v = -1, w = 0
  * v = 0, w = -1
  * v = 13, w = 0
  * v = 0, w = 13
  * v = -1 2 7 , w = 1 4 6 10 11
  * v = 2 7 , w = -1 1 4 6 10 11
  * v = 13 2 7 , w = 1 4 6 10 11
  * v = 2 7 , w = 13 1 4 6 10 11
==&gt; passed

Test 17: check length() and ancestor() with Iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 35083
    - w = 48629
    - student   length() = 0
    - reference length() = 9

  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 7093
    - w = 18765 21191
    - student   length() = 0
    - reference length() = 12

  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 33733 81309
    - w = 6202
    - student   length() = 0
    - reference length() = 14

  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 60136 77834
    - w = 43425 51151
    - student   length() = 0
    - reference length() = 12

  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 872 38687 50710
    - w size = 11
    - student   length() = 0
    - reference length() = 4

  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v size = 11
    - w = 23705 30671 60987
    - student   length() = 0
    - reference length() = 9

  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
    - failed on trial 1 of 100
    - v = 25232 38517 51013 52123 75977
    - w =
    - student   length() = 0
    - reference length() = -1

  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==&gt; FAILED

Test 18: Check Iterable version of length() and ancestor() with null arguments
    java.lang.NullPointerException

    Util.checkVertices(Util.java:46)
    SAP.length(SAP.java:40)
    TestSAP.checkNullArguments(TestSAP.java:931)
    TestSAP.test18(TestSAP.java:980)
    TestSAP.main(TestSAP.java:1261)

    - called length(v, null)
    - but java.lang.IllegalArgumentException not thrown

==&gt; FAILED

Test 19: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - ancestor() is not ancestor on shortest ancestral path
    - failed on call 2 to ancestor()
    - v = 6 7 9 14 15
    - w = 5 13 15 17
    - student   ancestor = 6
    - distance from v to 6 = 0
    - distance from w to 6 = 1
    - reference ancestor = 15
    - reference length   = 0

  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
    - ancestor() is not ancestor on shortest ancestral path
    - failed on call 1 to ancestor()
    - v = 6 8 10 15 17
    - w = 1 2 5 8 9
    - student   ancestor = 6
    - distance from v to 6 = 0
    - distance from w to 6 = 1
    - reference ancestor = 8
    - reference length   = 0

==&gt; FAILED


Total: 16/19 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
==&gt; passed

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==&gt; passed

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
==&gt; passed

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
==&gt; passed

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
==&gt; passed

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
==&gt; passed

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
==&gt; passed

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets3.txt, hypernyms3InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

==&gt; FAILED

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==&gt; passed

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==&gt; passed

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
==&gt; passed

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
==&gt; passed

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
==&gt; passed

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
==&gt; passed


Total: 13/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast4.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8a.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast9a.txt
  * outcast10.txt
  * outcast10a.txt
  * outcast11.txt
  * outcast12.txt
  * outcast12a.txt
  * outcast17.txt
  * outcast20.txt
  * outcast29.txt
==&gt; passed

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)
  * outcast2.txt
  * outcast3.txt
  * outcast5.txt
  * outcast5a.txt
  * outcast7.txt
  * outcast8.txt
  * outcast8b.txt
  * outcast8c.txt
  * outcast9.txt
  * outcast10.txt
  * outcast11.txt
==&gt; passed


Total: 2/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 9005400 bytes
reference   memory    = 10320552 bytes
ratio                 = 0.87
maximum allowed ratio = 2.50

Total: 1/1 tests passed!

================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 959016 bytes
    - reference memory              = 1494080 bytes
    - student / reference ratio     = 0.6
    - maximum allowed rato          = 2.0

==&gt; passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 4712536 bytes
    - reference memory              = 7297056 bytes
    - student / reference ratio     = 0.6
    - maximum allowed rato          = 2.0

==&gt; passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 11268848 bytes
    - reference memory              = 16930552 bytes
    - student / reference ratio     = 0.7
    - maximum allowed rato          = 2.0

==&gt; passed

Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.00 seconds
      -  maximum allowed  time =  1.00 seconds
==&gt; passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
    java.lang.OutOfMemoryError: Java heap space

    edu.princeton.cs.algs4.BreadthFirstDirectedPaths.&lt;init&gt;(BreadthFirstDirectedPaths.java:63)
    SAP.getBFSFromCache(SAP.java:80)
    SAP.getCCA(SAP.java:59)
    SAP.length(SAP.java:28)
    TimeSAP.callsPerSecond(TimeSAP.java:42)
    TimeSAP.timeLengthAndAncestor(TimeSAP.java:133)
    TimeSAP.test2(TimeSAP.java:280)
    TimeSAP.main(TimeSAP.java:364)

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
    java.lang.OutOfMemoryError: Java heap space

    edu.princeton.cs.algs4.BreadthFirstDirectedPaths.&lt;init&gt;(BreadthFirstDirectedPaths.java:80)
    SAP.lambda$getBFSFromCache2$0(SAP.java:87)
    SAP$$Lambda$1/2093176254.apply(Unknown Source)
    java.util.HashMap.computeIfAbsent(HashMap.java:1126)
    SAP.getBFSFromCache2(SAP.java:87)
     ...
    SAP.length(SAP.java:41)
    TimeSAP.callsPerSecondSubset(TimeSAP.java:79)
    TimeSAP.timeLengthAndAncestorSubset(TimeSAP.java:214)
    TimeSAP.test3(TimeSAP.java:290)
    TimeSAP.main(TimeSAP.java:367)

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
    java.lang.OutOfMemoryError: Java heap space

    edu.princeton.cs.algs4.BreadthFirstDirectedPaths.&lt;init&gt;(BreadthFirstDirectedPaths.java:80)
    SAP.lambda$getBFSFromCache2$0(SAP.java:87)
    SAP$$Lambda$1/2093176254.apply(Unknown Source)
    java.util.HashMap.computeIfAbsent(HashMap.java:1126)
    SAP.getBFSFromCache2(SAP.java:87)
     ...
    SAP.length(SAP.java:41)
    TimeSAP.callsPerSecondSubset(TimeSAP.java:79)
    TimeSAP.timeLengthAndAncestorSubset(TimeSAP.java:214)
    TimeSAP.test4(TimeSAP.java:299)
    TimeSAP.main(TimeSAP.java:370)

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
==&gt; passed


Total: 2/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
==&gt; passed

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each
  * calls to constructor = 6
    - minimum required   = 1
    - maximum allowed    = 1

  * calls to length()    = 3
  * calls to ancestor()  = 6

==&gt; FAILED

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 1
  * calls to addEdge()   = 84505
  * calls to adj()       = 0
  * calls to outdegree() = 0
  * calls to indegree()  = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==&gt; passed

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * calls to constructor = 2000
    - the distance() and sap() methods should not need to create new digraphs

  * calls to addEdge()   = 0
  * calls to adj()       = 46208
  * calls to reverse()   = 0
  * calls to toString()  = 0

==&gt; FAILED

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.39 seconds
    - maximum allowed     time = 10.00 seconds

==&gt; passed

Test 6a-e: time sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  219774.00
    - student   solution calls per second:      96.75
    - reference / student ratio:              2271.57

=&gt; passed    student &lt;= 10000x reference
=&gt; FAILED    student &lt;=  1000x reference
=&gt; FAILED    student &lt;=   100x reference
=&gt; FAILED    student &lt;=    10x reference
=&gt; FAILED    student &lt;=     5x reference

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  640720.00
    - student   solution calls per second:  586160.00
    - reference / student ratio:                 1.09
    - allowed ratio:                             4.00
==&gt; passed

Total: 5/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: count calls to methods in WordNet
 * outcast4.txt
 * outcast10.txt
 * outcast29.txt
==&gt; passed

Test 2: timing calls to outcast() for various outcast files

Total time must not exceed 1.0 seconds.

    filename       n     time
-----------------------------
   outcast4.txt    4     0.00
   outcast5.txt    5     0.00
  outcast5a.txt    5     0.00
   outcast5.txt    5     0.00
   outcast7.txt    7     0.00
   outcast8.txt    8     0.00
  outcast8a.txt    8     0.00
  outcast8b.txt    8     0.00
  outcast8c.txt    8     0.00
   outcast9.txt    9     0.00
  outcast9a.txt    9     0.00
  outcast10.txt   10     0.00
 outcast10a.txt   10     0.00
  outcast11.txt   11     0.00
  outcast12.txt   12     0.00
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.00
  outcast29.txt   29     0.01

Total elapsed time: 0.02 seconds

==&gt; passed


Total: 2/2 tests passed!


================================================================